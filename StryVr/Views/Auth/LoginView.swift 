//
//  LoginView.swift
//  StryVr
//
//  🔐 Secure, Themed, and Firebase-Integrated Login Screen
//

import SwiftUI

struct LoginView: View {
    @EnvironmentObject var authViewModel: AuthViewModel

    @State private var email: String = ""
    @State private var password: String = ""
    @State private var errorMessage: String?
    @State private var isLoading: Bool = false
    @State private var showForgotPassword = false
    @State private var showRegister = false

    var body: some View {
        ZStack {
            Theme.Colors.background.ignoresSafeArea()

            VStack(spacing: Theme.Spacing.large) {
                // MARK: - Title
                Text("Login to StryVr")
                    .font(Theme.Typography.headline)
                    .foregroundColor(Theme.Colors.textPrimary)
                    .padding(.top, Theme.Spacing.xLarge)

                // MARK: - Email Field
                TextField("Email", text: $email)
                    .textContentType(.emailAddress)
                    .keyboardType(.emailAddress)
                    .autocapitalization(.none)
                    .padding()
                    .background(Theme.Colors.card)
                    .cornerRadius(Theme.CornerRadius.medium)
                    .foregroundColor(Theme.Colors.textPrimary)

                // MARK: - Password Field
                SecureField("Password", text: $password)
                    .textContentType(.password)
                    .padding()
                    .background(Theme.Colors.card)
                    .cornerRadius(Theme.CornerRadius.medium)
                    .foregroundColor(Theme.Colors.textPrimary)

                // MARK: - Error Display
                if let error = errorMessage {
                    Text(error)
                        .font(Theme.Typography.caption)
                        .foregroundColor(.red)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal, Theme.Spacing.medium)
                }

                // MARK: - Login Button
                Button(action: loginUser) {
                    if isLoading {
                        ProgressView()
                            .progressViewStyle(CircularProgressViewStyle(tint: Theme.Colors.accent))
                    } else {
                        Text("Login")
                            .font(Theme.Typography.body)
                            .foregroundColor(Theme.Colors.whiteText)
                            .padding()
                            .frame(maxWidth: .infinity)
                            .background(Theme.Colors.accent)
                            .cornerRadius(Theme.CornerRadius.medium)
                    }
                }
                .disabled(isLoading)

                // MARK: - Forgot / Sign Up Navigation
                HStack {
                    Button("Forgot Password?") {
                        showForgotPassword.toggle()
                        simpleHaptic()
                    }
                    .font(Theme.Typography.caption)
                    .foregroundColor(Theme.Colors.accent)

                    Spacer()

                    Button("Sign Up") {
                        showRegister.toggle()
                        simpleHaptic()
                    }
                    .font(Theme.Typography.caption)
                    .foregroundColor(Theme.Colors.accent)
                }

                Spacer()
            }
            .padding(.horizontal, Theme.Spacing.large)
        }
        .sheet(isPresented: $showForgotPassword) {
            ForgotPasswordView()
                .environmentObject(authViewModel)
        }
        .sheet(isPresented: $showRegister) {
            RegisterView()
                .environmentObject(authViewModel)
        }
        .onReceive(authViewModel.$errorMessage) { newErrorMessage in
            self.errorMessage = newErrorMessage
            self.isLoading = false
        }
        .onReceive(authViewModel.$userSession) { _ in
            self.isLoading = false
        }
    }

    // MARK: - Firebase Login Logic
    private func loginUser() {
        guard !email.isEmpty, !password.isEmpty else {
            errorMessage = "Please enter both email and password."
            return
        }

        guard isValidEmail(email) else {
            errorMessage = "Please enter a valid email address."
            return
        }

        isLoading = true
        simpleHaptic()
        authViewModel.signIn(email: email, password: password)
    }

    // MARK: - Email Validation
    private func isValidEmail(_ email: String) -> Bool {
        let emailRegex = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}"
        return NSPredicate(format: "SELF MATCHES %@", emailRegex).evaluate(with: email)
    }

    // MARK: - Simple Haptic Feedback
    private func simpleHaptic() {
        let generator = UIImpactFeedbackGenerator(style: .light)
        generator.impactOccurred()
    }
}

#Preview {
    LoginView()
        .environmentObject(AuthViewModel.shared)
}
