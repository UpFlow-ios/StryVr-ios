 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/StryVr/App/AppDelegate.swift b/StryVr/App/AppDelegate.swift
index 5ee5f9a91332d499b0238089ab384f14fbe35ed2..9fa9565d0e482ce884acc74d61782ea903c9c5f0 100755
--- a/StryVr/App/AppDelegate.swift
+++ b/StryVr/App/AppDelegate.swift
@@ -1,36 +1,38 @@
 //
 //  AppDelegate.swift
 //  StryVr
 //
 //  üîí Secure App Lifecycle Setup with Firebase & Push Notifications
 //
 
 import Firebase
 import os
+#if canImport(UIKit)
 import UIKit
 import UserNotifications
+#endif
 
 class AppDelegate: UIResponder, UIApplicationDelegate, MessagingDelegate, UNUserNotificationCenterDelegate {
     var window: UIWindow?
     private let logger = Logger(subsystem: "com.stryvr.app", category: "AppDelegate")
 
     func application(
         _ application: UIApplication,
         didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?
     ) -> Bool {
         configureFirebase()
         setupPushNotifications(application)
         Messaging.messaging().delegate = self
         return true
     }
 
     // MARK: - Firebase Configuration
 
     private func configureFirebase() {
         guard FirebaseApp.app() == nil else {
             logger.info("‚úÖ Firebase already configured.")
             return
         }
         FirebaseApp.configure()
         logger.info("üî• Firebase configured successfully")
     }
diff --git a/StryVr/App/Info.plist b/StryVr/App/Info.plist
index 607ab14417ca56550beb175493e201c651a8dff6..3f62b7828bcfea344ac648c1a74ad5fcffb59846 100755
--- a/StryVr/App/Info.plist
+++ b/StryVr/App/Info.plist
@@ -15,29 +15,33 @@
 	<key>NSAppTransportSecurity</key>
 	<dict>
 		<key>NSAllowsArbitraryLoads</key>
 		<true/>
 	</dict>
 	<key>NSCameraUsageDescription</key>
 	<string>StryVr needs access to your camera for video calls and content creation.</string>
 	<key>NSMicrophoneUsageDescription</key>
 	<string>StryVr needs access to your microphone for voice communication during video calls.</string>
 	<key>NSFaceIDUsageDescription</key>
 	<string>StryVr uses Face ID for secure login and authentication.</string>
 	<key>UIBackgroundModes</key>
 	<array>
 		<string>audio</string>
 		<string>voip</string>
 		<string>fetch</string>
 	</array>
 	<key>FirebaseAppDelegateProxyEnabled</key>
 	<true/>
 	<key>NSUserNotificationAlertStyle</key>
 	<string>banner</string>
 	<key>NSBluetoothPeripheralUsageDescription</key>
 	<string>StryVr needs access to Bluetooth for connecting to external devices.</string>
 	<key>NSLocationAlwaysUsageDescription</key>
 	<string>StryVr needs access to your location even when the app is not in use to provide continuous personalized learning.</string>
-	<key>NSMotionUsageDescription</key>
-	<string>StryVr uses motion data to enhance your learning experience.</string>
+        <key>NSMotionUsageDescription</key>
+        <string>StryVr uses motion data to enhance your learning experience.</string>
+        <key>NSPhotoLibraryUsageDescription</key>
+        <string>StryVr needs access to your photo library for uploading images.</string>
+        <key>NSUserTrackingUsageDescription</key>
+        <string>This identifier will be used to deliver personalized ads.</string>
 </dict>
 </plist>
diff --git a/StryVr/App/SceneDelegate.swift b/StryVr/App/SceneDelegate.swift
index 282fa6b63a6fa08fa0c28892b1c3fe94a81b76b6..f970e75b099abc4463911935e549378153d36a37 100755
--- a/StryVr/App/SceneDelegate.swift
+++ b/StryVr/App/SceneDelegate.swift
@@ -1,35 +1,41 @@
 //
 //  SceneDelegate.swift
 //  StryVr
 //
 //  üåê Manages App Window & Session Routing
 //
 
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
+#if canImport(UIKit)
 import UIKit
-import os.log
+#endif
+#if canImport(os)
+import os
+#endif
 
 #if !DEBUG_TESTING
 import FirebaseCore
 import FirebaseAuth
 #endif
 
 class SceneDelegate: UIResponder, UIWindowSceneDelegate {
     var window: UIWindow?
 
     func scene(
         _ scene: UIScene,
         willConnectTo session: UISceneSession,
         options connectionOptions: UIScene.ConnectionOptions
     ) {
         guard let windowScene = (scene as? UIWindowScene) else {
             os_log("‚ùå Failed to cast scene to UIWindowScene", log: .default, type: .error)
             return
         }
 
         // ‚úÖ Initialize Firebase only outside test context
         #if !DEBUG_TESTING
         if FirebaseApp.app() == nil {
             FirebaseApp.configure()
             os_log("üî• Firebase configured in SceneDelegate", log: .default, type: .info)
         }
diff --git a/StryVr/App/StryVrApp.swift b/StryVr/App/StryVrApp.swift
index 6280bda19c15ad89ef41cd4f4cfca5cd435c3df0..0be732a650c62bd97e7f8fac2afd17ccf4c5154f 100755
--- a/StryVr/App/StryVrApp.swift
+++ b/StryVr/App/StryVrApp.swift
@@ -1,35 +1,41 @@
 //
 //  StryVrApp.swift
 //  StryVr
 //
 //  üå± Entry Point with Firebase Setup, Splash Screen, Auth Routing
 //
 
+#if canImport(Firebase)
 import Firebase
+#endif
+#if canImport(os)
 import os
+#endif
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 @main
 struct StryVrApp: App {
     @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
 
     @StateObject private var authViewModel = AuthViewModel.shared
     @State private var showSplash = true
     private let splashDuration: TimeInterval = 2.0
     private let logger = Logger(subsystem: "com.stryvr.app", category: "AppLifecycle")
 
     init() {
         configureFirebase()
     }
 
     var body: some Scene {
         WindowGroup {
             Group {
                 if showSplash {
                     SplashScreenView()
                         .onAppear(perform: handleSplash)
                 } else {
                     NavigationStack {
                         if authViewModel.isAuthenticated {
                             HomeView()
                         } else {
diff --git a/StryVr/Assets.xcassets/AppIcon . b/StryVr/Assets.xcassets/AppIcon .
deleted file mode 100644
index c47e6b97e71ccfeb7fd5e7dbaaf3568ae13360ec..0000000000000000000000000000000000000000
--- a/StryVr/Assets.xcassets/AppIcon .	
+++ /dev/null
@@ -1,3 +0,0 @@
-
-/Users/joedormond/Downloads/stryvr icon/stryvr tree logo white .JPG
-/Users/joedormond/Downloads/stryvr icon/stryvr tree logo black .JPG
diff --git a/StryVr/Config/AppConfig.swift b/StryVr/Config/AppConfig.swift
index e854a62cc06c474fbac2b6ee2021c9082abc0f86..c9e6f2f1dff3c33e79d0a284ce9e04ebef546880 100644
--- a/StryVr/Config/AppConfig.swift
+++ b/StryVr/Config/AppConfig.swift
@@ -1,34 +1,34 @@
 //
 //  AppConfig.swift
 //  StryVr
 //
 //  üåç Central App Config ‚Äì Optimized for Environment URLs, API Keys, and Feature Flags
 //
 
 import Foundation
-import os.log
+import os
 
 /// Defines app environments
 enum AppEnvironment: String {
     case development = "Development"
     case staging = "Staging"
     case production = "Production"
 }
 
 /// Global configuration for the app
 enum AppConfig {
     // MARK: - Environment
 
     /// Set the current running environment here
     static let currentEnvironment: AppEnvironment = .development
 
     /// Base API URL based on current environment
     static var apiBaseURL: String {
         switch currentEnvironment {
         case .development:
             return "http://192.168.1.234:3000" // üîß ‚Üê Replace with your current local IP
         case .staging:
             return "https://staging.stryvr.app"
         case .production:
             return "https://api.stryvr.app"
         }
diff --git a/StryVr/Models/EmployeeModel.swift b/StryVr/Models/EmployeeModel.swift
index e798d682d6871d1a248198cd1c5b17546abb004e..1e2c597f620c9e0dc94a68914d6b2253bbfe4446 100644
--- a/StryVr/Models/EmployeeModel.swift
+++ b/StryVr/Models/EmployeeModel.swift
@@ -1,66 +1,87 @@
 //
 //  EmployeeModel.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 6/5/25.
 //  üë®‚Äçüíº Complete Employee Data Model for Insights & Dashboards
 //
 
 import Foundation
 
 /// Represents an employee within the StryVr organization insights system.
 struct EmployeeModel: Identifiable, Codable, Hashable {
     let id: String
     let name: String
     let email: String
     let role: String
     let department: String
     let joinDate: Date
+    /// Name of the avatar image in asset catalog
+    let avatar: String
     var skills: [SkillProgress]
     var feedbackEntries: [FeedbackEntry]
     var performanceRating: Double
     var goalsAchieved: Int
     var isActive: Bool
 }
 
 /// Feedback associated with an employee's behavior or performance.
 struct FeedbackEntry: Codable, Hashable {
     let category: FeedbackCategory
     let comment: String
     let rating: Int // 1 to 5
     let date: Date
 }
 
 /// Feedback rating types
 enum FeedbackCategory: String, Codable, CaseIterable {
     case communication
     case collaboration
     case responsiveness
     case initiative
     case clarity
     case leadership
 }
 
 #if DEBUG
     extension EmployeeModel {
         static let mock: EmployeeModel = .init(
             id: "emp001",
             name: "Jordan Rivera",
             email: "jordan.rivera@stryvr.com",
             role: "iOS Engineer",
             department: "Product Development",
             joinDate: Date(timeIntervalSince1970: 1_672_531_200),
+            avatar: "avatar_mock",
             skills: [
                 SkillProgress(skillName: "SwiftUI", percentage: 0.88),
                 SkillProgress(skillName: "Teamwork", percentage: 0.92),
             ],
             feedbackEntries: [
                 FeedbackEntry(category: .collaboration, comment: "Always helpful in team tasks.", rating: 5, date: .now),
                 FeedbackEntry(category: .clarity, comment: "Could communicate more clearly during standups.", rating: 3, date: .now),
             ],
             performanceRating: 4.6,
             goalsAchieved: 12,
             isActive: true
         )
     }
 #endif
+
+extension EmployeeModel {
+    /// Convenience initializer used in preview/demo data
+    init(name: String, role: String, avatar: String, completedGoals: Int) {
+        self.id = UUID().uuidString
+        self.name = name
+        self.email = ""
+        self.role = role
+        self.department = ""
+        self.joinDate = Date()
+        self.avatar = avatar
+        self.skills = []
+        self.feedbackEntries = []
+        self.performanceRating = 0
+        self.goalsAchieved = completedGoals
+        self.isActive = true
+    }
+}
diff --git a/StryVr/Models/Enums/TabItem.swift b/StryVr/Models/Enums/TabItem.swift
index bfd6ead2e3a9ce72685947a4688cdf11d6414a5c..3bd5b408ce883b85b62b2527761ed3d9707d07c6 100644
--- a/StryVr/Models/Enums/TabItem.swift
+++ b/StryVr/Models/Enums/TabItem.swift
@@ -1,35 +1,37 @@
 //
 //  TabItem.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/28/25.
 //
 //  üìÇ Enum - Defines available tabs for the CustomTabBar.
 //
 
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 enum TabItem: Int, CaseIterable {
     case home, learning, community, profile
 
     var title: String {
         switch self {
         case .home: return "Home"
         case .learning: return "Learn"
         case .community: return "Community"
         case .profile: return "Profile"
         }
     }
 
     var icon: String {
         switch self {
         case .home: return "icon_home"
         case .learning: return "icon_learning"
         case .community: return "icon_community"
         case .profile: return "icon_profile"
         }
     }
 
     var colorCode: String {
         switch self {
         case .home: return "blue"
diff --git a/StryVr/Models/LeaderboardUser.swift b/StryVr/Models/LeaderboardUser.swift
index 1107325bf057ae95058a0d978c1db9bde95b3386..333648357af0f59bc2e8e2aaff4fe96b8aaf20d5 100644
--- a/StryVr/Models/LeaderboardUser.swift
+++ b/StryVr/Models/LeaderboardUser.swift
@@ -1,58 +1,68 @@
 //
 //  LeaderboardUser.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 6/5/25.
 //  üèÜ Leaderboard User Model ‚Äì Tracks Skill Points, Rank, and Engagement
 //
 
 import Foundation
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
+#if canImport(UIKit)
+import UIKit
+#endif
 
 /// Represents a user on the StryVr leaderboard with performance metrics
 struct LeaderboardUser: Identifiable, Codable, Hashable {
     let id: String // Firebase UID or internal user ID
     let name: String
     let profileImageURL: String?
     let totalPoints: Int
     let rank: Int
     let skills: [String]
     let lastActive: Date
 
     // Optional metrics for engagement and credibility
     var isVerified: Bool = false
     var completedChallenges: Int = 0
     var feedbackScore: Double = 0.0
 
     // MARK: - UI Helpers
 
     var initials: String {
         let components = name.components(separatedBy: " ")
         return components.compactMap { $0.first }.prefix(2).map(String.init).joined().uppercased()
     }
 
+#if canImport(SwiftUI)
     var profileImage: Image {
-        if let urlString = profileImageURL, let url = URL(string: urlString) {
-            return Image(uiImage: UIImage(data: try! Data(contentsOf: url)) ?? UIImage())
+        if let urlString = profileImageURL,
+           let url = URL(string: urlString),
+           let data = try? Data(contentsOf: url),
+           let uiImage = UIImage(data: data) {
+            return Image(uiImage: uiImage)
         } else {
             return Image(systemName: "person.crop.circle.fill")
         }
     }
+#endif
 }
 
 #if DEBUG
     extension LeaderboardUser {
         static let mock: LeaderboardUser = .init(
             id: "mock123",
             name: "Ava Patel",
             profileImageURL: nil,
             totalPoints: 1500,
             rank: 3,
             skills: ["Swift", "Leadership"],
             lastActive: Date(),
             isVerified: true,
             completedChallenges: 12,
             feedbackScore: 4.8
         )
     }
 #endif
diff --git a/StryVr/Models/SkillProgress.swift b/StryVr/Models/SkillProgress.swift
index ed5e1d930546a51cabde41e57c839744d05a8e72..4fad4517f99e2766471b86f0e7f910938b4d15e6 100644
--- a/StryVr/Models/SkillProgress.swift
+++ b/StryVr/Models/SkillProgress.swift
@@ -1,40 +1,40 @@
 //
 //  SkillProgress.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/26/25
 //
 //  üìà Skill Progress Model ‚Äì Tracks user's progress and proficiency level per skill
 //
 
 import Foundation
 
 /// Represents progress made on a specific skill
 struct SkillProgress: Identifiable, Codable, Hashable {
     /// Unique identifier for the skill progress
     let id: String
     /// Name of the skill
-    let skill: String
+    let skillName: String
     /// Progress level (0.0 = no progress, 1.0 = fully mastered)
-    let progress: Double
+    let percentage: Double
 
     // MARK: - Computed Properties
 
     /// Converts progress to a readable string
     var progressLabel: String {
-        switch progress {
+        switch percentage {
         case 0.8 ... 1.0: return "Excellent"
         case 0.6 ..< 0.8: return "Good"
         case 0.4 ..< 0.6: return "Average"
         case 0.2 ..< 0.4: return "Below Average"
         default: return "Needs Improvement"
         }
     }
 
     // MARK: - Validation
 
     /// Validates that the progress is within the valid range
     var isValid: Bool {
-        (0.0 ... 1.0).contains(progress)
+        (0.0 ... 1.0).contains(percentage)
     }
 }
diff --git a/StryVr/Services/AIProfileValidator.swift b/StryVr/Services/AIProfileValidator.swift
index 7bf6ac92ac652d1ecd160c9e5535d135424c7459..1b5dae696ee4a4e934a09adbddd07e81d07006b6 100755
--- a/StryVr/Services/AIProfileValidator.swift
+++ b/StryVr/Services/AIProfileValidator.swift
@@ -1,33 +1,37 @@
 //
 //  AIProfileValidator.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/5/25.
 //
+#if canImport(AVFoundation)
 import AVFoundation
+#endif
+#if canImport(Combine)
 import Combine
+#endif
 import Foundation
 
 /// Handles AI-powered profile validation
 final class ProfileValidatorViewModel: ObservableObject {
     // MARK: - Published Properties
 
     @Published var isValidating = false
     @Published var validationResult: String?
     @Published var validationError: String?
 
     // MARK: - Dependencies
 
     private let validationService: ProfileValidationServiceProtocol
 
     // MARK: - Initialization
 
     init(validationService: ProfileValidationServiceProtocol = MockProfileValidationService()) {
         self.validationService = validationService
     }
 
     // MARK: - Methods
 
     /// Validates the profile using the provided validation service
     func validateProfile() {
         isValidating = true
diff --git a/StryVr/Services/AIRecommendationService.swift b/StryVr/Services/AIRecommendationService.swift
index 7a01e54057ad71051c232e5d56635df11a972b67..7614e73263b13d9ffa45c6c34d832e69adfee222 100755
--- a/StryVr/Services/AIRecommendationService.swift
+++ b/StryVr/Services/AIRecommendationService.swift
@@ -1,38 +1,38 @@
 //
 //  AIRecommendationService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/11/25
 //
 //  ü§ñ AI Recommendation Service ‚Äì Enhanced with Hugging Face integration
 //
 
 import FirebaseFirestore
 import FirebaseFirestoreSwift
 import Foundation
-import os.log
+import os
 
 final class AIRecommendationService {
     static let shared = AIRecommendationService()
     private let db: Firestore
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "AIRecommendationService")
 
     private init(db: Firestore = Firestore.firestore()) {
         self.db = db
     }
 
     // MARK: - Public Method for Skill Recommendations
 
     func fetchSkillRecommendations(for userID: String, completion: @escaping ([String]) -> Void) {
         guard !userID.isEmpty else {
             logger.error("‚ùå Invalid user ID provided.")
             completion([])
             return
         }
 
         db.collection("users")
             .document(userID)
             .getDocument { [weak self] snapshot, error in
                 guard let self = self else { return }
 
                 if let error = error {
diff --git a/StryVr/Services/AuthManager.swift b/StryVr/Services/AuthManager.swift
index 94f5f6db00e4eac212b4d6a6fcbfb435979e15a7..2578278796aa305bec51818a0e7a23dfd91ad5eb 100755
--- a/StryVr/Services/AuthManager.swift
+++ b/StryVr/Services/AuthManager.swift
@@ -1,44 +1,49 @@
 //
 //  AuthManager.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25
 //
 //  üîê Auth Manager ‚Äì Handles MFA (email & SMS) and secure session management
 //
+#if canImport(CryptoKit)
 import CryptoKit
+#endif
 import FirebaseAuth
 import FirebaseFirestore
 import Foundation
-import os.log
+// Centralized logging
+#if canImport(os)
+import os
+#endif
 
 /// Manages authentication, MFA, and session security in StryVr
 final class AuthManager {
     static let shared = AuthManager()
     private let db = Firestore.firestore()
-    private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "AuthManager")
+    private let logger = AppLogger.shared.general
 
     private init() {}
 
     // MARK: - Send Email Verification (MFA)
 
     /// Sends an email verification for MFA
     func sendMFAVerificationEmail(completion: @escaping (Bool, Error?) -> Void) {
         guard let user = Auth.auth().currentUser else {
             completion(false, AuthError.userNotAuthenticated)
             return
         }
 
         user.sendEmailVerification { error in
             if let error = error {
                 self.logger.error("üì© MFA email error: \(error.localizedDescription)")
                 completion(false, error)
             } else {
                 self.logger.info("‚úÖ MFA email sent")
                 completion(true, nil)
             }
         }
     }
 
     // MARK: - Send SMS for MFA
 
diff --git a/StryVr/Services/AuthService.swift b/StryVr/Services/AuthService.swift
index 4a44fba2314c4054061e324efe3b3d1b734cfa9d..dddff8e28483187852c7eef36310b5863710d7fc 100755
--- a/StryVr/Services/AuthService.swift
+++ b/StryVr/Services/AuthService.swift
@@ -1,38 +1,40 @@
 //
 //  AuthService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25
 //
 //  üîê Auth Service ‚Äì Handles Firebase Email/Password Auth and Okta OIDC Integration
 //
 
+#if canImport(AppAuth)
 import AppAuth
+#endif
 import FirebaseAuth
 import Foundation
-import os.log
+import os
 
 final class AuthService: ObservableObject {
     static let shared = AuthService()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr.app", category: "AuthService")
 
     // MARK: - Firebase Email/Password Auth
 
     private init() {}
 
     func signUp(email: String, password: String, completion: @escaping (Result<AuthDataResult, Error>) -> Void) {
         guard isValidEmail(email), isValidPassword(password) else {
             logger.error("‚ùå Invalid email or password format: %{public}@", "Signup input validation failed")
             completion(.failure(AuthError.invalidInput))
             return
         }
 
         Auth.auth().createUser(withEmail: email, password: password) { result, error in
             if let error = error {
                 self.logger.error("‚ùå Sign-up error: %{public}@", "\(error.localizedDescription)")
                 completion(.failure(error))
             } else if let result = result {
                 self.logger.info("‚úÖ User signed up with UID: %{public}@", "\(result.user.uid)")
                 completion(.success(result))
             }
         }
diff --git a/StryVr/Services/ChallengeSystem.swift b/StryVr/Services/ChallengeSystem.swift
index a3b417d8749242b768bf4ca2717a33e211ffc69b..840cf5633cd934b3d3b108ca14d7240093239a17 100755
--- a/StryVr/Services/ChallengeSystem.swift
+++ b/StryVr/Services/ChallengeSystem.swift
@@ -1,38 +1,38 @@
 //
 //  ChallengeSystem.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25
 //
 //  üèÜ Challenge System ‚Äì Manages learning challenges, competitions, and streak tracking
 //
 
 import FirebaseFirestore
 import FirebaseFirestoreSwift
 import Foundation
-import os.log
+import os
 
 /// Manages learning challenges, competitions, and streak tracking
 final class ChallengeSystem {
     static let shared = ChallengeSystem()
     private let db = Firestore.firestore()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "ChallengeSystem")
 
     private init() {}
 
     // MARK: - Create Challenge
 
     /// Creates a new learning challenge
     func createChallenge(title: String, description: String, reward: String, durationDays: Int, completion: @escaping (Bool, Error?) -> Void) {
         guard !title.isEmpty, !description.isEmpty, !reward.isEmpty else {
             logger.error("‚ùå Invalid input for creating challenge")
             completion(false, ChallengeError.invalidInput)
             return
         }
 
         let challengeID = UUID().uuidString
         let endDate = Calendar.current.date(byAdding: .day, value: durationDays, to: Date()) ?? Date()
 
         let challengeData: [String: Any] = [
             "id": challengeID,
             "title": title,
diff --git a/StryVr/Services/ConferenceCallService.swift b/StryVr/Services/ConferenceCallService.swift
index 0c4a1c1521c785cfad82d27361513f18413463e0..c57cbf2fdf4b34b55ba92123e323868d14ae512e 100755
--- a/StryVr/Services/ConferenceCallService.swift
+++ b/StryVr/Services/ConferenceCallService.swift
@@ -1,35 +1,37 @@
 //
 //  ConferenceCallService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //
+#if canImport(AVFoundation)
 import AVFoundation
+#endif
 import FirebaseFirestore
 import Foundation
-import os.log
+import os
 
 /// Manages real-time video calls, recording, chat, and screen sharing
 final class ConferenceCallService {
     static let shared = ConferenceCallService()
     private let db = Firestore.firestore()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "ConferenceCallService")
 
     private init() {}
 
     // MARK: - Schedule Call
 
     /// Schedules a new conference call
     func scheduleConferenceCall(title: String, hostID: String, scheduledDate: Date, completion: @escaping (Bool, Error?) -> Void) {
         guard !title.isEmpty, !hostID.isEmpty else {
             logger.error("‚ùå Invalid input for scheduling call")
             completion(false, ConferenceCallError.invalidInput)
             return
         }
 
         let callID = UUID().uuidString
         let callData: [String: Any] = [
             "title": title,
             "hostID": hostID,
             "id": callID,
             "participants": [hostID],
diff --git a/StryVr/Services/FirestoreService.swift b/StryVr/Services/FirestoreService.swift
index 338942275ce1fdad5ff69a0420403376181ae686..acb0626931eae48ae4e21353c0f9b41551b3fd6c 100755
--- a/StryVr/Services/FirestoreService.swift
+++ b/StryVr/Services/FirestoreService.swift
@@ -1,38 +1,38 @@
 //
 //  FirestoreService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 2/24/25
 //
 //  üì° FirestoreService ‚Äì Centralized Firestore access layer for user data, skills, and history
 //
 
 import FirebaseAuth
 import FirebaseFirestore
 import Foundation
-import os.log
+import os
 
 class FirestoreService {
     static let shared = FirestoreService()
     private let db = Firestore.firestore()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "FirestoreService")
     private init() {}
 
     func fetchUserData(userID: String, completion: @escaping (Result<UserData, Error>) -> Void) {
         guard Auth.auth().currentUser != nil else {
             logger.error("‚õî No authenticated user session")
             completion(.failure(FirestoreServiceError.invalidInput))
             return
         }
         guard !userID.isEmpty else {
             completion(.failure(FirestoreServiceError.invalidInput))
             return
         }
         db.collection("users").document(userID).getDocument { document, error in
             if let error = error {
                 self.logger.error("‚ùå Firestore fetch error: \(error.localizedDescription)")
                 completion(.failure(error))
                 return
             }
 
             guard let document = document, document.exists,
diff --git a/StryVr/Services/NotificationService.swift b/StryVr/Services/NotificationService.swift
index 8819bb8352f38038ba6bfc54df20e657dc2b71c5..e2edf3edf3b0de36ba4957a39d204b60718ac202 100755
--- a/StryVr/Services/NotificationService.swift
+++ b/StryVr/Services/NotificationService.swift
@@ -1,37 +1,39 @@
 //
 //  NotificationService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //
 import FirebaseAuth
 import FirebaseFirestore
 import FirebaseMessaging
 import Foundation
-import os.log
+import os
+#if canImport(UserNotifications)
 import UserNotifications
+#endif
 
 /// Manages push notifications for video engagement, recommendations, and learning reminders
 final class NotificationService: NSObject, ObservableObject, UNUserNotificationCenterDelegate, MessagingDelegate {
     static let shared = NotificationService()
     private let db = Firestore.firestore()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "NotificationService")
 
     override private init() {}
 
     // MARK: - Notification Permissions
 
     /// Requests push notification permissions from the user
     func requestNotificationPermissions() {
         let center = UNUserNotificationCenter.current()
         center.delegate = self
 
         center.requestAuthorization(options: [.alert, .sound, .badge]) { _, error in
             if let error = error {
                 self.logger.error("‚ùå Notification permission error: \(error.localizedDescription)")
             } else {
                 self.logger.info("‚úÖ Notification permissions granted")
                 DispatchQueue.main.async {
                     UIApplication.shared.registerForRemoteNotifications()
                 }
             }
diff --git a/StryVr/Services/PaymentService.swift b/StryVr/Services/PaymentService.swift
index 8510e3bed2cd2d76aa8c18fbc0d39e908e325a79..8ae50c1b960047ea20f8b560ab8586cd648d1d7d 100755
--- a/StryVr/Services/PaymentService.swift
+++ b/StryVr/Services/PaymentService.swift
@@ -1,35 +1,39 @@
 //
 //  PaymentService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //
+#if canImport(Combine)
 import Combine
+#endif
 import Foundation
-import os.log
+import os
+#if canImport(StoreKit)
 import StoreKit
+#endif
 
 /// Manages in-app purchases and subscriptions for StryVr
 final class PaymentService: NSObject, ObservableObject, SKPaymentTransactionObserver, SKProductsRequestDelegate {
     static let shared = PaymentService()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "PaymentService")
 
     @Published var availableProducts: [SKProduct] = []
     @Published var purchasedProducts: Set<String> = []
 
     override private init() {
         super.init()
         SKPaymentQueue.default().add(self)
     }
 
     // MARK: - Check Purchase
 
     /// Checks if a product has already been purchased
     func isProductPurchased(_ productID: String) -> Bool {
         guard !productID.isEmpty else {
             logger.error("‚ùå Invalid product ID")
             return false
         }
         return purchasedProducts.contains(productID)
     }
 
diff --git a/StryVr/Services/SecureStorageService.swift b/StryVr/Services/SecureStorageService.swift
index 54cbc24f6e608737d9881d2a30ae7395f8686712..56b8352db8fbf8a026961e685586cce462eea151 100755
--- a/StryVr/Services/SecureStorageService.swift
+++ b/StryVr/Services/SecureStorageService.swift
@@ -1,36 +1,40 @@
 //
 //  SecureStorageService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //  üîê SecureStorageService ‚Äì Keychain-based sensitive data handler with biometric authentication support
 //
 import Foundation
+#if canImport(LocalAuthentication)
 import LocalAuthentication
-import os.log
+#endif
+import os
+#if canImport(Security)
 import Security
+#endif
 
 /// Manages secure storage of sensitive data using Apple's Keychain API
 final class SecureStorageService {
     static let shared = SecureStorageService()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "SecureStorageService")
 
     private init() {}
 
     // MARK: - Secure Storage Methods
 
     /// Saves a value securely in the Keychain
     func save(key: String, value: String) {
         guard !key.isEmpty, !value.isEmpty else {
             logger.error("üî¥ Invalid key or value provided")
             return
         }
 
         guard let data = value.data(using: .utf8) else {
             logger.error("üî¥ Failed to convert value to data")
             return
         }
 
         let query: [String: Any] = [
             kSecClass as String: kSecClassGenericPassword,
             kSecAttrAccount as String: key,
diff --git a/StryVr/Services/VideoContentService.swift b/StryVr/Services/VideoContentService.swift
index 7c6b8a1ef5ea5b3d2f1224dc464e57222af38b40..fc62277597af7b6feacb840f40840075e5ca0775 100755
--- a/StryVr/Services/VideoContentService.swift
+++ b/StryVr/Services/VideoContentService.swift
@@ -1,37 +1,39 @@
 //
 //  VideoContentService.swift
 //  StryVr
 //
 //  üìπ VideoContentService ‚Äì Manages uploads, metadata, streaming & AI tagging
 //  Created by Joe Dormond on 3/12/25.
 //
+#if canImport(AVFoundation)
 import AVFoundation
+#endif
 import FirebaseFirestore
 import FirebaseStorage
 import Foundation
-import os.log
+import os
 
 /// Manages video uploads, metadata, streaming & AI tagging
 final class VideoContentService {
     static let shared = VideoContentService()
     private let storage = Storage.storage().reference()
     private let db = Firestore.firestore()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "VideoContentService")
 
     private init() {}
 
     // MARK: - Upload Video
 
     func uploadVideo(
         fileURL: URL,
         uploaderID: String,
         title: String,
         caption: String?,
         thumbnailURL: String? = nil,
         duration: Int,
         category: VideoCategory,
         isFeatured: Bool = false,
         completion: @escaping (String?) -> Void
     ) {
         let videoID = UUID().uuidString
         let videoRef = storage.child("videos/\(uploaderID)/\(videoID).mp4")
diff --git a/StryVr/Utils/ConfettiManager.swift b/StryVr/Utils/ConfettiManager.swift
index f0b0c386d2f0ab2b62fa5b7a4b7c9ceae9cc6278..9a72712e0426b2ac567726517665a258070c3802 100644
--- a/StryVr/Utils/ConfettiManager.swift
+++ b/StryVr/Utils/ConfettiManager.swift
@@ -1,40 +1,49 @@
 //
 //  ConfettiManager.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 5/5/25.
 //  üéâ Central Confetti Manager for Achievements, Streaks & Challenges
 //
 
+#if canImport(ConfettiSwiftUI)
 import ConfettiSwiftUI
+#endif
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 /// Usage:
 /// Bind `.confettiCannon(counter: ConfettiManager.shared.counter, num: 20)` to a view.
 /// Call `ConfettiManager.shared.triggerConfetti()` to trigger the animation.
 
 /// Singleton manager to trigger confetti from anywhere in the app
 final class ConfettiManager: ObservableObject {
     static let shared = ConfettiManager()
 
     /// Counter that drives the confetti animation
     @Published var counter: Int = 0
 
     /// Number of confetti particles to emit (used by views that observe this)
     @Published var numberOfParticles: Int = 20
 
     /// Placeholder for future customization (e.g., colors or shapes)
     var styleOptions: [String: Any] = [:]
 
     private init() {}
 
     /// Call this to launch a confetti burst
     func triggerConfetti(particles: Int? = nil) {
         DispatchQueue.main.async {
             if let particles = particles {
                 self.numberOfParticles = particles
             }
             self.counter += 1
         }
     }
+
+    /// Alias for `triggerConfetti` used by legacy callers
+    func startConfetti(particles: Int? = nil) {
+        triggerConfetti(particles: particles)
+    }
 }
diff --git a/StryVr/Utils/CryptoHelper.swift b/StryVr/Utils/CryptoHelper.swift
index 02fe3148a5e1f72348050248dc9aba92d1d62853..75bf80810527aa1a1c976e39b64967d84ea07fa9 100644
--- a/StryVr/Utils/CryptoHelper.swift
+++ b/StryVr/Utils/CryptoHelper.swift
@@ -1,26 +1,28 @@
 //
 //  CryptoHelper.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 5/15/25.
 //  üîê Utility ‚Äì Secure Hashing with SHA256 (CryptoKit)
 //
 
+#if canImport(CryptoKit)
 import CryptoKit
+#endif
 import Foundation
 
 enum CryptoHelper {
     /// Generates a SHA256 hash from a string
     static func hash(_ input: String) -> String {
         let inputData = Data(input.utf8)
         let hashed = SHA256.hash(data: inputData)
         return hashed.map { String(format: "%02x", $0) }.joined()
     }
 
     /// Compares input string to a hashed string
     static func verify(_ input: String, against hashed: String) -> Bool {
         return hash(input) == hashed
     }
 }
 
 //     /// Generates a random UUID string
diff --git a/StryVr/Utils/LottieAnimationManager.swift b/StryVr/Utils/LottieAnimationManager.swift
index 0305d553da8c052e1c007f5ca1643844a20be442..6063ea96a04a98f412b4dc07435b8f5cf9fbea01 100755
--- a/StryVr/Utils/LottieAnimationManager.swift
+++ b/StryVr/Utils/LottieAnimationManager.swift
@@ -1,32 +1,33 @@
 //
 //  LottieAnimationManager.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 5/14/25.
 //  üéûÔ∏è Lottie Wrapper ‚Äì SwiftUI-Compatible View for Confetti & Animations
 //
+#if canImport(Lottie) && canImport(SwiftUI)
 import Lottie
 import SwiftUI
 
 /// SwiftUI-compatible wrapper for displaying Lottie animations
 struct LottieAnimationView: UIViewRepresentable {
     let animationName: String
     let loopMode: LottieLoopMode
     var onComplete: (() -> Void)? = nil
 
     func makeUIView(context: Context) -> UIView {
         let containerView = UIView(frame: .zero)
 
         guard let animation = Animation.named(animationName) else {
             assertionFailure("‚ö†Ô∏è Lottie animation not found: \(animationName)")
             return containerView
         }
 
         let animationView = AnimationView(animation: animation)
         animationView.contentMode = .scaleAspectFit
         animationView.loopMode = loopMode
         animationView.translatesAutoresizingMaskIntoConstraints = false
         animationView.isAccessibilityElement = true
         animationView.accessibilityLabel = "Lottie animation: \(animationName)"
 
         containerView.addSubview(animationView)
@@ -44,25 +45,26 @@ struct LottieAnimationView: UIViewRepresentable {
                 onComplete?()
             }
         }
 
         context.coordinator.animationView = animationView
         return containerView
     }
 
     func updateUIView(_: UIView, context: Context) {
         guard let animationView = context.coordinator.animationView else { return }
         animationView.play { finished in
             if finished {
                 onComplete?()
             }
         }
     }
 
     func makeCoordinator() -> Coordinator {
         Coordinator()
     }
 
     final class Coordinator {
         var animationView: AnimationView?
     }
 }
+#endif
diff --git a/StryVr/Utils/NetworkManager.swift b/StryVr/Utils/NetworkManager.swift
index 16c520f672613db9631a1f73970fa29fcdd2e998..943f99a7bb8f972e200a2492a2b2cab1f8701434 100755
--- a/StryVr/Utils/NetworkManager.swift
+++ b/StryVr/Utils/NetworkManager.swift
@@ -1,35 +1,35 @@
 //
 //  NetworkManager.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/26/25.
 //  üåê Centralized HTTP client for consistent and logged API requests
 //
 
 import Foundation
-import os.log
+import os
 
 final class NetworkManager {
     // MARK: - Singleton
 
     static let shared = NetworkManager()
 
     // MARK: - Logger
 
     private let logger = Logger(subsystem: "com.stryvr.networking", category: "NetworkManager")
 
     // MARK: - Init
 
     private init() {}
 
     // MARK: - Generic Request Method
 
     /// Sends a generic HTTP request and decodes the result into a Codable type
     func request<T: Codable>(
         urlString: String,
         method: HTTPMethod = .get,
         headers: [String: String]? = nil,
         timeout: TimeInterval = 30.0,
         decoder: JSONDecoder = JSONDecoder(),
         completion: @escaping (Result<T, NetworkError>) -> Void
     ) {
diff --git a/StryVr/Utils/ReportAnalysisHelper.swift b/StryVr/Utils/ReportAnalysisHelper.swift
index d5c42426bf858a7acc195901bd459719ae2355dd..8e70eac8482afe738a657650358ebc84490e10e4 100644
--- a/StryVr/Utils/ReportAnalysisHelper.swift
+++ b/StryVr/Utils/ReportAnalysisHelper.swift
@@ -1,35 +1,35 @@
 //
 //  ReportAnalysisHelper.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/1/25.
 //  üìä Optimized for Performance, Scalability, and Clarity
 //
 
 import Foundation
-import os.log
+import os
 
 // MARK: - ReportAnalysisHelper
 
 enum ReportAnalysisHelper {
     /// Calculates average progress for each skill across reports.
     /// - Parameter reports: `[LearningReport]` array.
     /// - Returns: `[String: Double]` skills dictionary with average progress.
     static func calculateAverageSkillProgress(from reports: [LearningReport]) -> [String: Double] {
         var skillTotals = [String: (total: Double, count: Int)]()
 
         for report in reports {
             for (skill, progress) in report.skillsProgress {
                 skillTotals[skill, default: (0, 0)].total += progress
                 skillTotals[skill, default: (0, 0)].count += 1
             }
         }
 
         let averages = skillTotals.compactMapValues { total, count -> Double? in
             guard count > 0 else { return nil }
             let average = total / Double(count)
             os_log("üìä Skill %{public}@ average: %{public}.2f", skill, average)
             return average
         }
 
         return averages
diff --git a/StryVr/Utils/ResumePDFGenerator.swift b/StryVr/Utils/ResumePDFGenerator.swift
index 36cfc7dfa556ec0067245990085ec52ae134b076..b593102faa096ae02b0b803729910bd97b7c8877 100644
--- a/StryVr/Utils/ResumePDFGenerator.swift
+++ b/StryVr/Utils/ResumePDFGenerator.swift
@@ -1,35 +1,37 @@
 //
 //  ResumePDFGenerator.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/30/25.
 //
 
-import Foundation
-import PDFKit
+#if canImport(UIKit)
 import UIKit
+import PDFKit
+#endif
+import Foundation
 
 class ResumePDFGenerator {
     static let shared = ResumePDFGenerator()
 
     /// Generates a PDF resume with the given details.
     /// - Parameters:
     ///   - name: The name of the individual.
     ///   - location: The location/address of the individual.
     ///   - companies: An array of verified companies with role and dates.
     ///   - skills: An array of tuples containing skill name and proficiency percentage.
     ///   - workImpact: A description of the work impact.
     ///   - teamFeedback: Feedback from the team.
     /// - Returns: A URL pointing to the generated PDF file.
     func createPDF(
         name: String,
         location: String,
         companies: [String],
         skills: [(name: String, percentage: Int)],
         workImpact: String,
         teamFeedback: String
     ) -> URL {
         let pdfMetaData = [
             kCGPDFContextCreator: "Stryvr",
             kCGPDFContextAuthor: "Stryvr AI Engine",
             kCGPDFContextTitle: "Verified R√©sum√©",
diff --git a/StryVr/ViewModels/AuthViewModel.swift b/StryVr/ViewModels/AuthViewModel.swift
index dde5c0fab552a2341381590786be1ea5c9b7fb25..420d2034e6b2f8426abe2eb9e42b2234eb38a3f4 100644
--- a/StryVr/ViewModels/AuthViewModel.swift
+++ b/StryVr/ViewModels/AuthViewModel.swift
@@ -1,35 +1,37 @@
 //
 //  AuthViewModel.swift
 //  StryVr
 //
 //  üîí Fully Optimized Auth ViewModel with Enhanced Error Handling, Firebase Auth Integration, Real-Time Updates
 //
 
 import FirebaseAuth
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 final class AuthViewModel: ObservableObject {
     static let shared = AuthViewModel()
 
     @Published private(set) var userSession: FirebaseAuth.User?
     @Published private(set) var errorMessage: String?
     @Published private(set) var isAuthenticated: Bool = false
 
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr.app", category: "AuthViewModel")
     private var authListenerHandle: AuthStateDidChangeListenerHandle?
 
     private init() {
         configureAuthListener()
     }
 
     deinit {
         removeAuthListener()
     }
 
     // MARK: - Auth State Listener
 
     private func configureAuthListener() {
         authListenerHandle = Auth.auth().addStateDidChangeListener { [weak self] _, user in
             DispatchQueue.main.async {
                 self?.userSession = user
diff --git a/StryVr/ViewModels/HomeViewModel.swift b/StryVr/ViewModels/HomeViewModel.swift
index fc921456245e09a7e514ad0b883108108f402ef0..e4299fadcb07877204ee1361905658b612d71aa7 100755
--- a/StryVr/ViewModels/HomeViewModel.swift
+++ b/StryVr/ViewModels/HomeViewModel.swift
@@ -1,36 +1,38 @@
 //
 //  HomeViewModel.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/15/25.
 //  üìà Fully Optimized for Performance, Scalability, Robust Error Handling, and Maintainability
 //
 
+#if canImport(Combine)
 import Combine
+#endif
 import Foundation
-import os.log
+import os
 
 final class HomeViewModel: ObservableObject {
     // MARK: - Published Properties
 
     @Published private(set) var skills: [Skill] = []
     @Published var errorMessage: String?
     @Published private(set) var isLoading: Bool = false
 
     // MARK: - Private Properties
 
     private var cancellables = Set<AnyCancellable>()
     private let skillService: SkillServiceProtocol
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr.app", category: "HomeViewModel")
 
     // MARK: - Initialization
 
     init(skillService: SkillServiceProtocol = SkillService.shared) {
         self.skillService = skillService
         fetchSkills()
     }
 
     // MARK: - Fetch Skills from SkillService
 
     /// Fetches skills using `SkillService` with structured logging and error handling.
     func fetchSkills() {
diff --git a/StryVr/Views/AI/CareerCard.swift b/StryVr/Views/AI/CareerCard.swift
index a2d134d65313ac6bc37ae094b4b9dafb85c20c22..b23a326246bfc2176c00319ae68875a1ceff9f72 100644
--- a/StryVr/Views/AI/CareerCard.swift
+++ b/StryVr/Views/AI/CareerCard.swift
@@ -1,43 +1,45 @@
 //
 //  CareerCard.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/1/25.
 //  üß† Reusable AI Career Suggestion Card | HIG-Compliant & Accessible
 //
 
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 /// A reusable, visually polished career suggestion card powered by AI insights.
 struct CareerCard: View {
     let title: String
 
     var body: some View {
         VStack(alignment: .leading, spacing: 8) {
             // Main Career Title
             Text(title)
                 .font(Theme.Typography.subheadline)
                 .foregroundColor(Theme.Colors.textPrimary)
                 .accessibilityLabel("Career title: \(title)")
 
             // AI-driven suggestion info
             Text("AI suggested this role based on your skill growth.")
                 .font(Theme.Typography.caption)
                 .foregroundColor(Theme.Colors.textSecondary)
                 .accessibilityHint("AI-based recommendation.")
         }
         .padding(Theme.Spacing.medium)
         .frame(maxWidth: .infinity, alignment: .leading)
-        .background(Theme.Colors.card ?? Color.gray) // Fallback color
+        .background(Theme.Colors.card)
         .cornerRadius(Theme.CornerRadius.large)
         .shadow(color: Theme.Colors.textSecondary.opacity(0.1), radius: 4, x: 0, y: 2)
         .accessibilityElement(children: .combine)
         .accessibilityAddTraits(.isButton) // Optional: if the card is interactive
     }
 }
 
 #Preview {
     CareerCard(title: "iOS Developer")
         .padding()
         .preferredColorScheme(.dark)
 }
diff --git a/StryVr/Views/AI/CareerPathInsightsView.swift b/StryVr/Views/AI/CareerPathInsightsView.swift
index e453c5cfa4fd9af1774ebe9843d9847f685b673a..93b22df6cd555286e4570f6109ddf061812aa07e 100644
--- a/StryVr/Views/AI/CareerPathInsightsView.swift
+++ b/StryVr/Views/AI/CareerPathInsightsView.swift
@@ -1,34 +1,36 @@
 //
 //  CareerPathInsightsView.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/1/25.
 //  üß† AI Career Insights View ‚Äì Personalized Pathway Suggestions
 //
 
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 struct CareerPathInsightsView: View {
     @State private var skillData: [SkillProgress] = []
     @State private var suggestedCareers: [String] = []
     @State private var isLoading: Bool = false
     @State private var errorMessage: String?
 
     var body: some View {
         NavigationStack {
             VStack(spacing: Theme.Spacing.large) {
                 Text("AI Career Insights")
                     .font(Theme.Typography.headline)
                     .padding(.top, Theme.Spacing.medium)
 
                 // Loading Indicator
                 if isLoading {
                     ProgressView("Analyzing your skills...")
                         .progressViewStyle(CircularProgressViewStyle(tint: Theme.Colors.accent))
                         .padding()
                 }
 
                 // Error Message
                 if let error = errorMessage {
                     Text(error)
                         .foregroundColor(.red)
diff --git a/StryVr/Views/AISkillCoachView.swift b/StryVr/Views/AISkillCoachView.swift
index a833801a2bb7a9c5d7aba6ee5d3df0ece8fbf06f..b7b9e1a88b337b4f0ebd9099981ef2a9dd2be13d 100755
--- a/StryVr/Views/AISkillCoachView.swift
+++ b/StryVr/Views/AISkillCoachView.swift
@@ -1,34 +1,36 @@
 //
 //  AISkillCoachView.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //  ü§ñ AI-Powered Skill Coach ‚Äì Learning Insights + Personalized Suggestions
 //
 
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 struct AISkillCoachView: View {
     @State private var recommendedSkills: [String] = []
     @State private var progressInsights: String = "Loading insights..."
     @State private var hasError: Bool = false
 
     @State private var isLoading: Bool = true
     var body: some View {
         ZStack {
             Theme.Colors.background.ignoresSafeArea()
 
             ScrollView {
                 VStack(alignment: .leading, spacing: Theme.Spacing.large) {
                     // MARK: - Header
 
                     Text("AI Skill Coach")
                         .font(Theme.Typography.headline)
                         .foregroundColor(Theme.Colors.textPrimary)
                         .padding(.top, Theme.Spacing.large)
                         .accessibilityLabel("AI Skill Coach")
                         .accessibilityHint("Provides personalized skill recommendations and growth insights")
 
                     // MARK: - Recommendations
 
                     StryVrCardView(title: "üîç Personalized Skill Recommendations") {
diff --git a/StryVr/Views/Auth/RegisterView.swift b/StryVr/Views/Auth/RegisterView.swift
index 08276b58a1f06805584730bef89186d81c8f1ade..e1d6bda9bd0fe04f32fff1b1f3bd351e82e6f8a6 100644
--- a/StryVr/Views/Auth/RegisterView.swift
+++ b/StryVr/Views/Auth/RegisterView.swift
@@ -1,34 +1,38 @@
 //
 //  RegisterView.swift
 //  StryVr
 //
 //  üîê Secure, Firebase-integrated Account Creation with Optional Confetti Celebration
 //
 
+#if canImport(ConfettiSwiftUI)
 import ConfettiSwiftUI
+#endif
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 struct RegisterView: View {
     @Environment(\.presentationMode) var presentationMode
 
     @State private var email: String = ""
     @State private var password: String = ""
     @State private var confirmPassword: String = ""
     @State private var errorMessage: String?
     @State private var isLoading: Bool = false
     @State private var showConfetti: Int = 0
 
     private let authViewModel = AuthViewModel.shared
 
     var body: some View {
         ZStack {
             Theme.Colors.background.ignoresSafeArea()
 
             VStack(spacing: Theme.Spacing.large) {
                 Text("Create Account")
                     .font(Theme.Typography.headline)
                     .foregroundColor(Theme.Colors.textPrimary)
                     .padding(.top, Theme.Spacing.xLarge)
 
                 // MARK: - Input Fields
 
diff --git a/StryVr/Views/Home/FriendLearningFeed.swift b/StryVr/Views/Home/FriendLearningFeed.swift
index 3412e275fc9510c1f39b808e75e1fe7a7c91d855..0a78831859ab87108db83a3fdcaf89be9068995d 100755
--- a/StryVr/Views/Home/FriendLearningFeed.swift
+++ b/StryVr/Views/Home/FriendLearningFeed.swift
@@ -1,35 +1,35 @@
 //
 //  FriendLearningFeed.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //  üß† Real-Time Friend Skill Feed ‚Äì Firebase-Powered Social Learning UI
 //
 
 import FirebaseFirestore
-import os.log
+import os
 import SwiftUI
 
 /// Displays a real-time social feed showing what friends are learning
 struct FriendLearningFeed: View {
     @State private var feedItems: [LearningFeedItem] = []
     @State private var isError: Bool = false
     @State private var isLoading: Bool = true
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "FriendLearningFeed")
 
     var body: some View {
         NavigationStack {
             ZStack {
                 Theme.Colors.background.ignoresSafeArea()
 
                 if isLoading {
                     ProgressView("Loading feed...")
                         .progressViewStyle(CircularProgressViewStyle(tint: Theme.Colors.accent))
                         .accessibilityLabel("Loading friend learning feed")
                 } else if isError {
                     VStack {
                         Text("‚ö†Ô∏è Failed to load feed. Please try again later.")
                             .font(Theme.Typography.body)
                             .foregroundColor(.red)
                             .padding()
                             .accessibilityLabel("Error loading learning feed")
diff --git a/StryVr/Views/Home/HomeView.swift b/StryVr/Views/Home/HomeView.swift
index 40df7de1cd401f2f45157899255bd3bd98799bda..10127e991ed253e0bf6382fe3ba6ba15d1a7b8de 100755
--- a/StryVr/Views/Home/HomeView.swift
+++ b/StryVr/Views/Home/HomeView.swift
@@ -1,35 +1,39 @@
 //
 //  HomeView.swift
 //  StryVr
 //
 //  üè° Clean Home Dashboard ‚Äì Daily Goals, Streaks, Challenges, Achievements with Confetti Celebrations
 //
 
+#if canImport(ConfettiSwiftUI)
 import ConfettiSwiftUI
-import os.log
+#endif
+import os
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 struct HomeView: View {
     @State private var dailyGoalCompleted = false
     @State private var currentStreak = 5
     @State private var bestStreak = 12
     @State private var activeChallengesCount = 3
     @State private var recentAchievementsCount = 2
 
     @StateObject private var confettiManager = ConfettiManager.shared
     @EnvironmentObject var authViewModel: AuthViewModel
 
     @Environment(\.isDebug) var isDebug
     @State private var showDevPanel = false
 
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "HomeView")
 
     var body: some View {
         NavigationStack {
             ZStack(alignment: .topLeading) {
                 ScrollView {
                     VStack(alignment: .leading, spacing: Theme.Spacing.large) {
                         // MARK: - Greeting
 
                         Text("Welcome back to StryVr! üëã")
                             .font(Theme.Typography.headline)
diff --git a/StryVr/Views/LeaderboardView.swift b/StryVr/Views/LeaderboardView.swift
index 0672add382081a040eb57d7d8a8054772e525908..6ff0f08f3a758846784c1f9ad832a1c7365445d3 100755
--- a/StryVr/Views/LeaderboardView.swift
+++ b/StryVr/Views/LeaderboardView.swift
@@ -1,85 +1,82 @@
 //
 //  LeaderboardView.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //  üèÜ Displays top learners (Gamification + Recognition)
 //
 
 import SwiftUI
 import FirebaseFirestore
-import os.log
+import os
 
 struct LeaderboardView: View {
     @State private var topLearners: [LeaderboardUser] = []
     @State private var isLoading: Bool = true
     @State private var hasError: Bool = false
 
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "LeaderboardView")
 
     var body: some View {
         NavigationView {
             ZStack {
                 Theme.Colors.background.ignoresSafeArea()
 
                 if isLoading {
                     ProgressView("Loading Leaderboard...")
                         .progressViewStyle(CircularProgressViewStyle(tint: Theme.Colors.accent))
                         .accessibilityLabel("Loading leaderboard")
                 } else if hasError {
                     VStack(spacing: Theme.Spacing.medium) {
                         Text("‚ö†Ô∏è Failed to load leaderboard data.")
                             .foregroundColor(.red)
                             .font(.headline)
                             .accessibilityLabel("Failed to load leaderboard data")
                         Button("Retry") {
                             fetchLeaderboardData()
                         }
                         .font(Theme.Typography.body)
                         .foregroundColor(Theme.Colors.accent)
                         .accessibilityLabel("Retry button")
                     }
                 } else {
                     ScrollView {
                         VStack(alignment: .leading, spacing: Theme.Spacing.large) {
                             Text("üèÜ Leaderboard")
                                 .font(Theme.Typography.headline)
                                 .foregroundColor(Theme.Colors.textPrimary)
 
                             StryVrCardView(title: "üî• Top Learners") {
                                 ForEach(topLearners) { user in
                                     LeaderboardRow(user: user)
                                 }
                             }
-
-                            .padding(.horizontal, Theme.Spacing.medium)
-                                }
-                            }
                         }
-                        .padding()
+                        .padding(.horizontal, Theme.Spacing.medium)
                     }
+                    .padding()
                 }
             }
             .navigationTitle("Leaderboard")
             .onAppear {
                 fetchLeaderboardData()
             }
         }
     }
 
     private func fetchLeaderboardData() {
         isLoading = true
         hasError = false
 
         let group = DispatchGroup()
 
         group.enter()
         fetchData(collection: "users", orderBy: "skillProgress", limit: 5) { result in
             switch result {
             case .success(let users):
                 self.topLearners = users
             case .failure(let error):
                 logger.error("Error fetching top learners: \(error.localizedDescription)")
                 self.hasError = true
             }
             group.leave()
diff --git a/StryVr/Views/PaywallView.swift b/StryVr/Views/PaywallView.swift
index 7667e1e65badfb57c394d881c29d54845a42d41b..ffed7d86596931818c13e0f045fff402bcf9651b 100755
--- a/StryVr/Views/PaywallView.swift
+++ b/StryVr/Views/PaywallView.swift
@@ -1,33 +1,33 @@
 //
 //  PaywallView.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //
 
-import os.log
+import os
 import StoreKit
 import SwiftUI
 
 /// Displays the paywall with AI-based trial recommendations and premium offers
 struct PaywallView: View {
     @State private var selectedPlan: SubscriptionPlan = .premium
     @State private var isProcessingPayment = false
     @State private var limitedTimeOffer: String?
     @State private var showAlert = false
     @State private var alertMessage = ""
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "PaywallView")
 
     var body: some View {
         ZStack {
             Color.background.ignoresSafeArea()
 
             ScrollView {
                 VStack(spacing: Spacing.large) {
                     // MARK: - Header
 
                     VStack(spacing: Spacing.small) {
                         Text("üîì Unlock Your Full Potential!")
                             .font(FontStyle.title)
                             .foregroundColor(.whiteText)
                             .multilineTextAlignment(.center)
diff --git a/StryVr/Views/Security/SecureStorageManager.swift b/StryVr/Views/Security/SecureStorageManager.swift
index ad137562ad98f482f6922674a0c44f331f284758..b9954ed1cb4041727fc0e1ed06d92c017f82409d 100755
--- a/StryVr/Views/Security/SecureStorageManager.swift
+++ b/StryVr/Views/Security/SecureStorageManager.swift
@@ -1,34 +1,34 @@
 //
 //  SecureStorageManager.swift
 //  StryVr
 //
 //  Created by Joseph Dormond on 4/15/25.
 //  üîê SecureStorageManager & View ‚Äì Keychain-backed persistence with MVVM architecture
 //
 
-import os.log
+import os
 import Security
 import SwiftUI
 
 // MARK: - SecureStorageError
 
 enum SecureStorageError: Error, LocalizedError {
     case dataConversionFailed
     case saveFailed(OSStatus)
     case loadFailed(OSStatus)
 
     var errorDescription: String? {
         switch self {
         case .dataConversionFailed:
             return "Data conversion failed."
         case let .saveFailed(status):
             return "Save failed with status: \(status)."
         case let .loadFailed(status):
             return "Load failed with status: \(status)."
         }
     }
 }
 
 // MARK: - SecureStorageManager
 
 final class SecureStorageManager {
diff --git a/StryVr/Views/SplashScreen/SplashScreenView.swift b/StryVr/Views/SplashScreen/SplashScreenView.swift
index 4e14cbb75244aea5a2e9d152ba39f97d85980d5c..720bf37f6412a22ccfaf640fc98729e0c8358861 100755
--- a/StryVr/Views/SplashScreen/SplashScreenView.swift
+++ b/StryVr/Views/SplashScreen/SplashScreenView.swift
@@ -1,35 +1,35 @@
 //
 //  SplashScreenView.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/17/25.
 //
 
 import SwiftUI
 import AVKit
-import os.log
+import os
 
 /// Animated splash screen using a short `.mp4` intro video with dark/light mode support
 struct SplashScreenView: View {
     @State private var isFinished = false
     @Environment(\.colorScheme) var colorScheme
 
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "StryVr", category: "SplashScreenView")
 
     var body: some View {
         Group {
             if isFinished {
                 StryVrAppEntryPoint()
             } else {
                 SplashVideoPlayer(videoName: "stryvr2", videoExtension: "mp4") {
                     logger.info("üé¨ Splash video finished")
                     isFinished = true
                 }
                 .ignoresSafeArea()
                 .background(backgroundColor)
             }
         }
     }
 
     // MARK: - Dynamic Background Color
 
diff --git a/StryVr/Views/UITheme/Colors.swift b/StryVr/Views/UITheme/Colors.swift
index aed86bdb71d56c3a20d255ff1b6396611d541045..b7e344f4d0e7c39e711341b91031ac44f6b4bfa7 100644
--- a/StryVr/Views/UITheme/Colors.swift
+++ b/StryVr/Views/UITheme/Colors.swift
@@ -1,58 +1,63 @@
 //
 //  Colors.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/15/25.
 //  üé® Optimized Color System for Performance & HIG Compliance
 //
 
 import SwiftUI
+#if canImport(os)
+import os
+#endif
 
 extension Color {
     // MARK: - Hex initializer with optional opacity
 
     /// Initializes a `Color` from a hex string with optional opacity.
     /// - Parameters:
     ///   - hex: The hex string representing the color (e.g., "#FFFFFF").
     ///   - opacity: The opacity of the color (default is 1.0).
     init(hex: String, opacity: Double = 1.0) {
         let cleanedHex = hex.trimmingCharacters(in: .alphanumerics.inverted)
         var int: UInt64 = 0
         Scanner(string: cleanedHex).scanHexInt64(&int)
 
         let r, g, b: Double
         switch cleanedHex.count {
         case 6:
             r = Double((int >> 16) & 0xFF) / 255.0
             g = Double((int >> 8) & 0xFF) / 255.0
             b = Double(int & 0xFF) / 255.0
         default:
             r = 0.0
             g = 0.0
             b = 0.0
+#if canImport(os)
             os_log("‚ö†Ô∏è Invalid hex string: %{public}@", log: .default, type: .error, hex)
+#endif
         }
 
         self.init(.sRGB, red: r, green: g, blue: b, opacity: opacity)
     }
 
     // MARK: - App Color Palette (HIG & Accessibility Compliant)
 
     /// App-wide color palette using asset catalog colors.
     static let background = Color("Background") // Use asset catalog colors
     static let card = Color("Card")
     static let neonBlue = Color("NeonBlue")
     static let lightGray = Color("LightGray")
     static let whiteText = Color("WhiteText")
 }
 
 // MARK: - Preview colors (Fallback defaults if assets fail)
 
 extension Color {
     enum Fallback {
         /// Fallback colors for previews or when asset catalog colors are unavailable.
         static let background = Color(hex: "#0D0D0D")
         static let card = Color(hex: "#1A1A1A")
         static let neonBlue = Color(hex: "#4FC3F7")
         static let lightGray = Color(hex: "#AAAAAA")
         static let whiteText = Color.white
diff --git a/StryVr/Views/UITheme/ThemeManager.swift b/StryVr/Views/UITheme/ThemeManager.swift
index ac311a030fe6fff354b2e1c0b30caffe1343e8d6..73c8e787fb4c160c824dcc7810a3436addc7c7aa 100755
--- a/StryVr/Views/UITheme/ThemeManager.swift
+++ b/StryVr/Views/UITheme/ThemeManager.swift
@@ -1,53 +1,55 @@
 //
 //  ThemeManager.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/7/25.
 //  üé® Centralized Theme Config for Layout, Fonts, Colors & Shadows
 //
 
 import SwiftUI
 
 /// Global Theme Configuration used throughout StryVr
 enum Theme {
     // MARK: - Color Palette (Asset-based)
 
     /// Defines the app's primary color palette, with optional fallbacks.
     enum Colors {
         static let safeTextPrimary = Color("TextPrimaryColor") ?? Fallback.textPrimary
         static let safeTextSecondary = Color("TextSecondaryColor") ?? Fallback.textSecondary
         static let background = Color("BackgroundColor")
+        static let card = Color("CardColor")
         static let textPrimary = Color("TextPrimaryColor")
         static let textSecondary = Color("TextSecondaryColor")
         static let accent = Color("AccentColor")
         static let whiteText = Color.white // ‚úÖ Add this to fix missing 'whiteText'
 
         /// Fallbacks (optional)
         enum Fallback {
             static let primary = Color(hex: "#4FC3F7")
             static let background = Color(hex: "#0D0D0D")
+            static let card = Color(hex: "#1A1A1A")
             static let textPrimary = Color.white
             static let textSecondary = Color(hex: "#AAAAAA")
             static let accent = Color(hex: "#FF4081")
         }
     }
 
     // MARK: - Typography (Apple HIG + Rounded)
 
     /// Defines the app's typography styles for consistent text appearance.
     enum Typography {
         static let headline = Font.system(size: 24, weight: .bold, design: .rounded)
         static let subheadline = Font.system(size: 20, weight: .medium, design: .rounded)
         static let body = Font.system(size: 16, weight: .regular, design: .default)
         static let caption = Font.system(size: 14, weight: .light, design: .default)
         static let buttonText = Font.system(size: 18, weight: .semibold, design: .rounded)
     }
 
     // MARK: - Corner Radius (UI Layout Tokens)
 
     /// Defines corner radius values for consistent UI layout.
     enum CornerRadius {
         static let small: CGFloat = 8
         static let medium: CGFloat = 12
         static let large: CGFloat = 16
         static let extraLarge: CGFloat = 24
diff --git a/StryVrModule/App/AppDelegate.swift b/StryVrModule/App/AppDelegate.swift
index 5ee5f9a91332d499b0238089ab384f14fbe35ed2..176406cdbedb6c21be1c26379ccf8646363861ec 100755
--- a/StryVrModule/App/AppDelegate.swift
+++ b/StryVrModule/App/AppDelegate.swift
@@ -1,36 +1,42 @@
 //
 //  AppDelegate.swift
 //  StryVr
 //
 //  üîí Secure App Lifecycle Setup with Firebase & Push Notifications
 //
 
+#if canImport(Firebase)
 import Firebase
+#endif
+#if canImport(os)
 import os
+#endif
+#if canImport(UIKit)
 import UIKit
 import UserNotifications
+#endif
 
 class AppDelegate: UIResponder, UIApplicationDelegate, MessagingDelegate, UNUserNotificationCenterDelegate {
     var window: UIWindow?
     private let logger = Logger(subsystem: "com.stryvr.app", category: "AppDelegate")
 
     func application(
         _ application: UIApplication,
         didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?
     ) -> Bool {
         configureFirebase()
         setupPushNotifications(application)
         Messaging.messaging().delegate = self
         return true
     }
 
     // MARK: - Firebase Configuration
 
     private func configureFirebase() {
         guard FirebaseApp.app() == nil else {
             logger.info("‚úÖ Firebase already configured.")
             return
         }
         FirebaseApp.configure()
         logger.info("üî• Firebase configured successfully")
     }
diff --git a/StryVrModule/App/Info.plist b/StryVrModule/App/Info.plist
index 607ab14417ca56550beb175493e201c651a8dff6..3f62b7828bcfea344ac648c1a74ad5fcffb59846 100755
--- a/StryVrModule/App/Info.plist
+++ b/StryVrModule/App/Info.plist
@@ -15,29 +15,33 @@
 	<key>NSAppTransportSecurity</key>
 	<dict>
 		<key>NSAllowsArbitraryLoads</key>
 		<true/>
 	</dict>
 	<key>NSCameraUsageDescription</key>
 	<string>StryVr needs access to your camera for video calls and content creation.</string>
 	<key>NSMicrophoneUsageDescription</key>
 	<string>StryVr needs access to your microphone for voice communication during video calls.</string>
 	<key>NSFaceIDUsageDescription</key>
 	<string>StryVr uses Face ID for secure login and authentication.</string>
 	<key>UIBackgroundModes</key>
 	<array>
 		<string>audio</string>
 		<string>voip</string>
 		<string>fetch</string>
 	</array>
 	<key>FirebaseAppDelegateProxyEnabled</key>
 	<true/>
 	<key>NSUserNotificationAlertStyle</key>
 	<string>banner</string>
 	<key>NSBluetoothPeripheralUsageDescription</key>
 	<string>StryVr needs access to Bluetooth for connecting to external devices.</string>
 	<key>NSLocationAlwaysUsageDescription</key>
 	<string>StryVr needs access to your location even when the app is not in use to provide continuous personalized learning.</string>
-	<key>NSMotionUsageDescription</key>
-	<string>StryVr uses motion data to enhance your learning experience.</string>
+        <key>NSMotionUsageDescription</key>
+        <string>StryVr uses motion data to enhance your learning experience.</string>
+        <key>NSPhotoLibraryUsageDescription</key>
+        <string>StryVr needs access to your photo library for uploading images.</string>
+        <key>NSUserTrackingUsageDescription</key>
+        <string>This identifier will be used to deliver personalized ads.</string>
 </dict>
 </plist>
diff --git a/StryVrModule/App/SceneDelegate.swift b/StryVrModule/App/SceneDelegate.swift
index 6aa78a97c1ec5710173a1ff0700d2a6dd5eab8ae..7e6883d6d1a89e4286d78ec8762b242e13905746 100755
--- a/StryVrModule/App/SceneDelegate.swift
+++ b/StryVrModule/App/SceneDelegate.swift
@@ -1,37 +1,47 @@
 //
 //  SceneDelegate.swift
 //  StryVr
 //
 //  üåê Manages App Window & Session Routing
 //
 
+#if canImport(FirebaseAuth)
 import FirebaseAuth
+#endif
+#if canImport(FirebaseCore)
 import FirebaseCore
-import os.log
+#endif
+#if canImport(os)
+import os
+#endif
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
+#if canImport(UIKit)
 import UIKit
+#endif
 
 class SceneDelegate: UIResponder, UIWindowSceneDelegate {
     var window: UIWindow?
 
     func scene(
         _ scene: UIScene,
         willConnectTo _: UISceneSession,
         options _: UIScene.ConnectionOptions
     ) {
         guard let windowScene = (scene as? UIWindowScene) else {
             os_log("‚ùå Failed to cast scene to UIWindowScene", log: .default, type: .error)
             return
         }
 
         // ‚úÖ Initialize Firebase if not already done
         if FirebaseApp.app() == nil {
             FirebaseApp.configure()
             os_log("üî• Firebase configured in SceneDelegate", log: .default, type: .info)
         }
 
         // ‚úÖ Determine initial view
         let contentView: some View = Auth.auth().currentUser != nil
             ? AnyView(HomeView())
             : AnyView(LoginView())
 
diff --git a/StryVrModule/App/StryVrApp.swift b/StryVrModule/App/StryVrApp.swift
index 6280bda19c15ad89ef41cd4f4cfca5cd435c3df0..0be732a650c62bd97e7f8fac2afd17ccf4c5154f 100755
--- a/StryVrModule/App/StryVrApp.swift
+++ b/StryVrModule/App/StryVrApp.swift
@@ -1,35 +1,41 @@
 //
 //  StryVrApp.swift
 //  StryVr
 //
 //  üå± Entry Point with Firebase Setup, Splash Screen, Auth Routing
 //
 
+#if canImport(Firebase)
 import Firebase
+#endif
+#if canImport(os)
 import os
+#endif
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 @main
 struct StryVrApp: App {
     @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
 
     @StateObject private var authViewModel = AuthViewModel.shared
     @State private var showSplash = true
     private let splashDuration: TimeInterval = 2.0
     private let logger = Logger(subsystem: "com.stryvr.app", category: "AppLifecycle")
 
     init() {
         configureFirebase()
     }
 
     var body: some Scene {
         WindowGroup {
             Group {
                 if showSplash {
                     SplashScreenView()
                         .onAppear(perform: handleSplash)
                 } else {
                     NavigationStack {
                         if authViewModel.isAuthenticated {
                             HomeView()
                         } else {
diff --git a/StryVrModule/Assets.xcassets/AppIcon . b/StryVrModule/Assets.xcassets/AppIcon .
deleted file mode 100644
index c47e6b97e71ccfeb7fd5e7dbaaf3568ae13360ec..0000000000000000000000000000000000000000
--- a/StryVrModule/Assets.xcassets/AppIcon .	
+++ /dev/null
@@ -1,3 +0,0 @@
-
-/Users/joedormond/Downloads/stryvr icon/stryvr tree logo white .JPG
-/Users/joedormond/Downloads/stryvr icon/stryvr tree logo black .JPG
diff --git a/StryVrModule/Assets.xcassets/AppIcon.appiconset/AppIcon60x60@2x.png b/StryVrModule/Assets.xcassets/AppIcon.appiconset/AppIcon60x60@2x.png
new file mode 100644
index 0000000000000000000000000000000000000000..1bf9cfddb751c761027aa74f8069994b2eafb2d4
GIT binary patch
literal 69
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx1|;Q0k8}bl9#0p?kcwN$2?+^69t#5_FPH8X
PAdA7%)z4*}Q$iB}br}p{

literal 0
HcmV?d00001

diff --git a/StryVrModule/Assets.xcassets/AppIcon.appiconset/AppIcon60x60@3x.png b/StryVrModule/Assets.xcassets/AppIcon.appiconset/AppIcon60x60@3x.png
new file mode 100644
index 0000000000000000000000000000000000000000..1bf9cfddb751c761027aa74f8069994b2eafb2d4
GIT binary patch
literal 69
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx1|;Q0k8}bl9#0p?kcwN$2?+^69t#5_FPH8X
PAdA7%)z4*}Q$iB}br}p{

literal 0
HcmV?d00001

diff --git a/StryVrModule/Assets.xcassets/AppIcon.appiconset/Contents.json b/StryVrModule/Assets.xcassets/AppIcon.appiconset/Contents.json
new file mode 100644
index 0000000000000000000000000000000000000000..d6cc6bac2d0b0c5aaf801ba81df707f08e241a2a
--- /dev/null
+++ b/StryVrModule/Assets.xcassets/AppIcon.appiconset/Contents.json
@@ -0,0 +1,20 @@
+{
+  "images" : [
+    {
+      "idiom" : "iphone",
+      "size" : "60x60",
+      "scale" : "2x",
+      "filename" : "AppIcon60x60@2x.png"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "60x60",
+      "scale" : "3x",
+      "filename" : "AppIcon60x60@3x.png"
+    }
+  ],
+  "info" : {
+    "version" : 1,
+    "author" : "xcode"
+  }
+}
diff --git a/StryVrModule/Config/AppConfig.swift b/StryVrModule/Config/AppConfig.swift
index e854a62cc06c474fbac2b6ee2021c9082abc0f86..03ac49e27bd46d6095564abd744096f69d337a63 100644
--- a/StryVrModule/Config/AppConfig.swift
+++ b/StryVrModule/Config/AppConfig.swift
@@ -1,34 +1,36 @@
 //
 //  AppConfig.swift
 //  StryVr
 //
 //  üåç Central App Config ‚Äì Optimized for Environment URLs, API Keys, and Feature Flags
 //
 
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 /// Defines app environments
 enum AppEnvironment: String {
     case development = "Development"
     case staging = "Staging"
     case production = "Production"
 }
 
 /// Global configuration for the app
 enum AppConfig {
     // MARK: - Environment
 
     /// Set the current running environment here
     static let currentEnvironment: AppEnvironment = .development
 
     /// Base API URL based on current environment
     static var apiBaseURL: String {
         switch currentEnvironment {
         case .development:
             return "http://192.168.1.234:3000" // üîß ‚Üê Replace with your current local IP
         case .staging:
             return "https://staging.stryvr.app"
         case .production:
             return "https://api.stryvr.app"
         }
diff --git a/StryVrModule/Models/EmployeeModel.swift b/StryVrModule/Models/EmployeeModel.swift
index e798d682d6871d1a248198cd1c5b17546abb004e..1e2c597f620c9e0dc94a68914d6b2253bbfe4446 100644
--- a/StryVrModule/Models/EmployeeModel.swift
+++ b/StryVrModule/Models/EmployeeModel.swift
@@ -1,66 +1,87 @@
 //
 //  EmployeeModel.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 6/5/25.
 //  üë®‚Äçüíº Complete Employee Data Model for Insights & Dashboards
 //
 
 import Foundation
 
 /// Represents an employee within the StryVr organization insights system.
 struct EmployeeModel: Identifiable, Codable, Hashable {
     let id: String
     let name: String
     let email: String
     let role: String
     let department: String
     let joinDate: Date
+    /// Name of the avatar image in asset catalog
+    let avatar: String
     var skills: [SkillProgress]
     var feedbackEntries: [FeedbackEntry]
     var performanceRating: Double
     var goalsAchieved: Int
     var isActive: Bool
 }
 
 /// Feedback associated with an employee's behavior or performance.
 struct FeedbackEntry: Codable, Hashable {
     let category: FeedbackCategory
     let comment: String
     let rating: Int // 1 to 5
     let date: Date
 }
 
 /// Feedback rating types
 enum FeedbackCategory: String, Codable, CaseIterable {
     case communication
     case collaboration
     case responsiveness
     case initiative
     case clarity
     case leadership
 }
 
 #if DEBUG
     extension EmployeeModel {
         static let mock: EmployeeModel = .init(
             id: "emp001",
             name: "Jordan Rivera",
             email: "jordan.rivera@stryvr.com",
             role: "iOS Engineer",
             department: "Product Development",
             joinDate: Date(timeIntervalSince1970: 1_672_531_200),
+            avatar: "avatar_mock",
             skills: [
                 SkillProgress(skillName: "SwiftUI", percentage: 0.88),
                 SkillProgress(skillName: "Teamwork", percentage: 0.92),
             ],
             feedbackEntries: [
                 FeedbackEntry(category: .collaboration, comment: "Always helpful in team tasks.", rating: 5, date: .now),
                 FeedbackEntry(category: .clarity, comment: "Could communicate more clearly during standups.", rating: 3, date: .now),
             ],
             performanceRating: 4.6,
             goalsAchieved: 12,
             isActive: true
         )
     }
 #endif
+
+extension EmployeeModel {
+    /// Convenience initializer used in preview/demo data
+    init(name: String, role: String, avatar: String, completedGoals: Int) {
+        self.id = UUID().uuidString
+        self.name = name
+        self.email = ""
+        self.role = role
+        self.department = ""
+        self.joinDate = Date()
+        self.avatar = avatar
+        self.skills = []
+        self.feedbackEntries = []
+        self.performanceRating = 0
+        self.goalsAchieved = completedGoals
+        self.isActive = true
+    }
+}
diff --git a/StryVrModule/Models/Enums/TabItem.swift b/StryVrModule/Models/Enums/TabItem.swift
index bfd6ead2e3a9ce72685947a4688cdf11d6414a5c..638af8da211ca9f36de4ec651251a69f8a7f840f 100644
--- a/StryVrModule/Models/Enums/TabItem.swift
+++ b/StryVrModule/Models/Enums/TabItem.swift
@@ -1,35 +1,38 @@
 //
 //  TabItem.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/28/25.
 //
 //  üìÇ Enum - Defines available tabs for the CustomTabBar.
 //
 
+// Avoid importing SwiftUI when building for platforms where it isn't available
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 enum TabItem: Int, CaseIterable {
     case home, learning, community, profile
 
     var title: String {
         switch self {
         case .home: return "Home"
         case .learning: return "Learn"
         case .community: return "Community"
         case .profile: return "Profile"
         }
     }
 
     var icon: String {
         switch self {
         case .home: return "icon_home"
         case .learning: return "icon_learning"
         case .community: return "icon_community"
         case .profile: return "icon_profile"
         }
     }
 
     var colorCode: String {
         switch self {
         case .home: return "blue"
diff --git a/StryVrModule/Models/LeaderboardUser.swift b/StryVrModule/Models/LeaderboardUser.swift
index 1107325bf057ae95058a0d978c1db9bde95b3386..333648357af0f59bc2e8e2aaff4fe96b8aaf20d5 100644
--- a/StryVrModule/Models/LeaderboardUser.swift
+++ b/StryVrModule/Models/LeaderboardUser.swift
@@ -1,58 +1,68 @@
 //
 //  LeaderboardUser.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 6/5/25.
 //  üèÜ Leaderboard User Model ‚Äì Tracks Skill Points, Rank, and Engagement
 //
 
 import Foundation
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
+#if canImport(UIKit)
+import UIKit
+#endif
 
 /// Represents a user on the StryVr leaderboard with performance metrics
 struct LeaderboardUser: Identifiable, Codable, Hashable {
     let id: String // Firebase UID or internal user ID
     let name: String
     let profileImageURL: String?
     let totalPoints: Int
     let rank: Int
     let skills: [String]
     let lastActive: Date
 
     // Optional metrics for engagement and credibility
     var isVerified: Bool = false
     var completedChallenges: Int = 0
     var feedbackScore: Double = 0.0
 
     // MARK: - UI Helpers
 
     var initials: String {
         let components = name.components(separatedBy: " ")
         return components.compactMap { $0.first }.prefix(2).map(String.init).joined().uppercased()
     }
 
+#if canImport(SwiftUI)
     var profileImage: Image {
-        if let urlString = profileImageURL, let url = URL(string: urlString) {
-            return Image(uiImage: UIImage(data: try! Data(contentsOf: url)) ?? UIImage())
+        if let urlString = profileImageURL,
+           let url = URL(string: urlString),
+           let data = try? Data(contentsOf: url),
+           let uiImage = UIImage(data: data) {
+            return Image(uiImage: uiImage)
         } else {
             return Image(systemName: "person.crop.circle.fill")
         }
     }
+#endif
 }
 
 #if DEBUG
     extension LeaderboardUser {
         static let mock: LeaderboardUser = .init(
             id: "mock123",
             name: "Ava Patel",
             profileImageURL: nil,
             totalPoints: 1500,
             rank: 3,
             skills: ["Swift", "Leadership"],
             lastActive: Date(),
             isVerified: true,
             completedChallenges: 12,
             feedbackScore: 4.8
         )
     }
 #endif
diff --git a/StryVrModule/Models/SkillProgress.swift b/StryVrModule/Models/SkillProgress.swift
index ed5e1d930546a51cabde41e57c839744d05a8e72..4fad4517f99e2766471b86f0e7f910938b4d15e6 100644
--- a/StryVrModule/Models/SkillProgress.swift
+++ b/StryVrModule/Models/SkillProgress.swift
@@ -1,40 +1,40 @@
 //
 //  SkillProgress.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/26/25
 //
 //  üìà Skill Progress Model ‚Äì Tracks user's progress and proficiency level per skill
 //
 
 import Foundation
 
 /// Represents progress made on a specific skill
 struct SkillProgress: Identifiable, Codable, Hashable {
     /// Unique identifier for the skill progress
     let id: String
     /// Name of the skill
-    let skill: String
+    let skillName: String
     /// Progress level (0.0 = no progress, 1.0 = fully mastered)
-    let progress: Double
+    let percentage: Double
 
     // MARK: - Computed Properties
 
     /// Converts progress to a readable string
     var progressLabel: String {
-        switch progress {
+        switch percentage {
         case 0.8 ... 1.0: return "Excellent"
         case 0.6 ..< 0.8: return "Good"
         case 0.4 ..< 0.6: return "Average"
         case 0.2 ..< 0.4: return "Below Average"
         default: return "Needs Improvement"
         }
     }
 
     // MARK: - Validation
 
     /// Validates that the progress is within the valid range
     var isValid: Bool {
-        (0.0 ... 1.0).contains(progress)
+        (0.0 ... 1.0).contains(percentage)
     }
 }
diff --git a/StryVrModule/Protocols/MutablePropertyWrapper.swift b/StryVrModule/Protocols/MutablePropertyWrapper.swift
new file mode 100644
index 0000000000000000000000000000000000000000..8362237eb197dbeb942ed71afe947f1008e29292
--- /dev/null
+++ b/StryVrModule/Protocols/MutablePropertyWrapper.swift
@@ -0,0 +1,16 @@
+//
+//  MutablePropertyWrapper.swift
+//  StryVr
+//
+//  Created by Codex on 7/2/25.
+//  Simplified protocol to allow generic preview wrappers for any mutable property wrapper.
+//
+
+import Foundation
+
+/// Minimal protocol that matches the requirements of a mutable property wrapper
+/// used in previews. Conforming wrappers must expose a mutable `wrappedValue`.
+public protocol MutablePropertyWrapper {
+    associatedtype Value
+    var wrappedValue: Value { get set }
+}
diff --git a/StryVrModule/Services/AIProfileValidator.swift b/StryVrModule/Services/AIProfileValidator.swift
index 7bf6ac92ac652d1ecd160c9e5535d135424c7459..1b5dae696ee4a4e934a09adbddd07e81d07006b6 100755
--- a/StryVrModule/Services/AIProfileValidator.swift
+++ b/StryVrModule/Services/AIProfileValidator.swift
@@ -1,33 +1,37 @@
 //
 //  AIProfileValidator.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/5/25.
 //
+#if canImport(AVFoundation)
 import AVFoundation
+#endif
+#if canImport(Combine)
 import Combine
+#endif
 import Foundation
 
 /// Handles AI-powered profile validation
 final class ProfileValidatorViewModel: ObservableObject {
     // MARK: - Published Properties
 
     @Published var isValidating = false
     @Published var validationResult: String?
     @Published var validationError: String?
 
     // MARK: - Dependencies
 
     private let validationService: ProfileValidationServiceProtocol
 
     // MARK: - Initialization
 
     init(validationService: ProfileValidationServiceProtocol = MockProfileValidationService()) {
         self.validationService = validationService
     }
 
     // MARK: - Methods
 
     /// Validates the profile using the provided validation service
     func validateProfile() {
         isValidating = true
diff --git a/StryVrModule/Services/AIRecommendationService.swift b/StryVrModule/Services/AIRecommendationService.swift
index 7a01e54057ad71051c232e5d56635df11a972b67..82a04e675fe70f0505f925bffff38e8f98ebeae7 100755
--- a/StryVrModule/Services/AIRecommendationService.swift
+++ b/StryVrModule/Services/AIRecommendationService.swift
@@ -1,38 +1,42 @@
 //
 //  AIRecommendationService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/11/25
 //
 //  ü§ñ AI Recommendation Service ‚Äì Enhanced with Hugging Face integration
 //
 
+#if canImport(FirebaseFirestore)
 import FirebaseFirestore
 import FirebaseFirestoreSwift
+#endif
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 final class AIRecommendationService {
     static let shared = AIRecommendationService()
     private let db: Firestore
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "AIRecommendationService")
 
     private init(db: Firestore = Firestore.firestore()) {
         self.db = db
     }
 
     // MARK: - Public Method for Skill Recommendations
 
     func fetchSkillRecommendations(for userID: String, completion: @escaping ([String]) -> Void) {
         guard !userID.isEmpty else {
             logger.error("‚ùå Invalid user ID provided.")
             completion([])
             return
         }
 
         db.collection("users")
             .document(userID)
             .getDocument { [weak self] snapshot, error in
                 guard let self = self else { return }
 
                 if let error = error {
diff --git a/StryVrModule/Services/AuthManager.swift b/StryVrModule/Services/AuthManager.swift
index 94f5f6db00e4eac212b4d6a6fcbfb435979e15a7..9361b493edad741a7ec50a1571bd299efe378066 100755
--- a/StryVrModule/Services/AuthManager.swift
+++ b/StryVrModule/Services/AuthManager.swift
@@ -1,44 +1,53 @@
 //
 //  AuthManager.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25
 //
 //  üîê Auth Manager ‚Äì Handles MFA (email & SMS) and secure session management
 //
+#if canImport(CryptoKit)
 import CryptoKit
+#endif
+#if canImport(FirebaseAuth)
 import FirebaseAuth
+#endif
+#if canImport(FirebaseFirestore)
 import FirebaseFirestore
+#endif
 import Foundation
-import os.log
+// Centralized logging
+#if canImport(os)
+import os
+#endif
 
 /// Manages authentication, MFA, and session security in StryVr
 final class AuthManager {
     static let shared = AuthManager()
     private let db = Firestore.firestore()
-    private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "AuthManager")
+    private let logger = AppLogger.shared.general
 
     private init() {}
 
     // MARK: - Send Email Verification (MFA)
 
     /// Sends an email verification for MFA
     func sendMFAVerificationEmail(completion: @escaping (Bool, Error?) -> Void) {
         guard let user = Auth.auth().currentUser else {
             completion(false, AuthError.userNotAuthenticated)
             return
         }
 
         user.sendEmailVerification { error in
             if let error = error {
                 self.logger.error("üì© MFA email error: \(error.localizedDescription)")
                 completion(false, error)
             } else {
                 self.logger.info("‚úÖ MFA email sent")
                 completion(true, nil)
             }
         }
     }
 
     // MARK: - Send SMS for MFA
 
diff --git a/StryVrModule/Services/AuthService.swift b/StryVrModule/Services/AuthService.swift
index 4a44fba2314c4054061e324efe3b3d1b734cfa9d..c4a1eb055a934384a023a321a41a61d60f848011 100755
--- a/StryVrModule/Services/AuthService.swift
+++ b/StryVrModule/Services/AuthService.swift
@@ -1,38 +1,44 @@
 //
 //  AuthService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25
 //
 //  üîê Auth Service ‚Äì Handles Firebase Email/Password Auth and Okta OIDC Integration
 //
 
+#if canImport(AppAuth)
 import AppAuth
+#endif
+#if canImport(FirebaseAuth)
 import FirebaseAuth
+#endif
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 final class AuthService: ObservableObject {
     static let shared = AuthService()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr.app", category: "AuthService")
 
     // MARK: - Firebase Email/Password Auth
 
     private init() {}
 
     func signUp(email: String, password: String, completion: @escaping (Result<AuthDataResult, Error>) -> Void) {
         guard isValidEmail(email), isValidPassword(password) else {
             logger.error("‚ùå Invalid email or password format: %{public}@", "Signup input validation failed")
             completion(.failure(AuthError.invalidInput))
             return
         }
 
         Auth.auth().createUser(withEmail: email, password: password) { result, error in
             if let error = error {
                 self.logger.error("‚ùå Sign-up error: %{public}@", "\(error.localizedDescription)")
                 completion(.failure(error))
             } else if let result = result {
                 self.logger.info("‚úÖ User signed up with UID: %{public}@", "\(result.user.uid)")
                 completion(.success(result))
             }
         }
diff --git a/StryVrModule/Services/BehaviorFeedbackService.swift b/StryVrModule/Services/BehaviorFeedbackService.swift
index 44daea91c32fd65bfb42233928677043e1389cd3..7e3b9462e6aeb22df89e8fb4d854ea83dfe05850 100644
--- a/StryVrModule/Services/BehaviorFeedbackService.swift
+++ b/StryVrModule/Services/BehaviorFeedbackService.swift
@@ -1,36 +1,38 @@
 //
 //  BehaviorFeedbackService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 5/5/25
 //
 //  ‚òÅÔ∏è Behavior Feedback Service ‚Äì Submits and retrieves employee behavior feedback using Firestore
 //
 
+#if canImport(FirebaseFirestore)
 import FirebaseFirestore
 import FirebaseFirestoreSwift
+#endif
 import Foundation
 
 final class BehaviorFeedbackService {
     static let shared = BehaviorFeedbackService()
     private let db = Firestore.firestore()
 
     private init() {}
 
     // MARK: - Submit Feedback
 
     func submitFeedback(_ feedback: BehaviorFeedback, completion: @escaping (Result<Void, Error>) -> Void) {
         do {
             let docRef = db.collection("behaviorFeedback").document(feedback.id)
             try docRef.setData(from: feedback) { error in
                 if let error = error {
                     completion(.failure(error))
                 } else {
                     completion(.success(()))
                 }
             }
         } catch {
             completion(.failure(error))
         }
     }
 
diff --git a/StryVrModule/Services/ChallengeSystem.swift b/StryVrModule/Services/ChallengeSystem.swift
index a3b417d8749242b768bf4ca2717a33e211ffc69b..b61c8e7cd74b6f3effcf749e646a63bde122ea22 100755
--- a/StryVrModule/Services/ChallengeSystem.swift
+++ b/StryVrModule/Services/ChallengeSystem.swift
@@ -1,38 +1,42 @@
 //
 //  ChallengeSystem.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25
 //
 //  üèÜ Challenge System ‚Äì Manages learning challenges, competitions, and streak tracking
 //
 
+#if canImport(FirebaseFirestore)
 import FirebaseFirestore
 import FirebaseFirestoreSwift
+#endif
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 /// Manages learning challenges, competitions, and streak tracking
 final class ChallengeSystem {
     static let shared = ChallengeSystem()
     private let db = Firestore.firestore()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "ChallengeSystem")
 
     private init() {}
 
     // MARK: - Create Challenge
 
     /// Creates a new learning challenge
     func createChallenge(title: String, description: String, reward: String, durationDays: Int, completion: @escaping (Bool, Error?) -> Void) {
         guard !title.isEmpty, !description.isEmpty, !reward.isEmpty else {
             logger.error("‚ùå Invalid input for creating challenge")
             completion(false, ChallengeError.invalidInput)
             return
         }
 
         let challengeID = UUID().uuidString
         let endDate = Calendar.current.date(byAdding: .day, value: durationDays, to: Date()) ?? Date()
 
         let challengeData: [String: Any] = [
             "id": challengeID,
             "title": title,
diff --git a/StryVrModule/Services/ConferenceCallService.swift b/StryVrModule/Services/ConferenceCallService.swift
index 0c4a1c1521c785cfad82d27361513f18413463e0..1e712fd407a131c4b898726329ab9f70ca165970 100755
--- a/StryVrModule/Services/ConferenceCallService.swift
+++ b/StryVrModule/Services/ConferenceCallService.swift
@@ -1,35 +1,41 @@
 //
 //  ConferenceCallService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //
+#if canImport(AVFoundation)
 import AVFoundation
+#endif
+#if canImport(FirebaseFirestore)
 import FirebaseFirestore
+#endif
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 /// Manages real-time video calls, recording, chat, and screen sharing
 final class ConferenceCallService {
     static let shared = ConferenceCallService()
     private let db = Firestore.firestore()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "ConferenceCallService")
 
     private init() {}
 
     // MARK: - Schedule Call
 
     /// Schedules a new conference call
     func scheduleConferenceCall(title: String, hostID: String, scheduledDate: Date, completion: @escaping (Bool, Error?) -> Void) {
         guard !title.isEmpty, !hostID.isEmpty else {
             logger.error("‚ùå Invalid input for scheduling call")
             completion(false, ConferenceCallError.invalidInput)
             return
         }
 
         let callID = UUID().uuidString
         let callData: [String: Any] = [
             "title": title,
             "hostID": hostID,
             "id": callID,
             "participants": [hostID],
diff --git a/StryVrModule/Services/CrashHandlingService.swift b/StryVrModule/Services/CrashHandlingService.swift
index c7b0bc00aadebb7e77fe2d8c34b5a040230a4e23..c6cd456e4108e6e76ab9a26bce416c84b14f05db 100644
--- a/StryVrModule/Services/CrashHandlingService.swift
+++ b/StryVrModule/Services/CrashHandlingService.swift
@@ -1,37 +1,41 @@
 //
 //  CrashHandlingService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/12/25
 //
 //  üìâ Crash Monitoring Service ‚Äì FirebaseCrashlytics Integration
 //
 
+#if canImport(FirebaseCrashlytics)
 import FirebaseCrashlytics
+#endif
 import Foundation
+#if canImport(os)
 import os
+#endif
 
 final class CrashHandlingService {
     static let shared = CrashHandlingService()
     private let logger = Logger(subsystem: "com.stryvr.app", category: "CrashHandling")
 
     private init() {}
 
     /// Log a custom error message to FirebaseCrashlytics
     func log(error: Error, context: String? = nil) {
         let errorDescription = context != nil ? "\(context!): \(error.localizedDescription)" : error.localizedDescription
         Crashlytics.crashlytics().record(error: error)
         logger.error("üß® Logged error to Crashlytics: \(errorDescription)")
     }
 
     /// Manually log a non-fatal event for debugging
     func log(message: String) {
         Crashlytics.crashlytics().log(message)
         logger.info("ü™µ Crashlytics log: \(message)")
     }
 
     /// Force a simulated crash (for testing Crashlytics integration)
     func simulateCrash() {
         logger.fault("üí• Simulated crash triggered")
         fatalError("üí• Simulated crash for testing purposes")
     }
diff --git a/StryVrModule/Services/EmployeeProgressService.swift b/StryVrModule/Services/EmployeeProgressService.swift
index 3d8f1050b87ad6d7ffd69d45def13d5da55000b7..2da6503568b860b362aecc1918d9802e51fb1614 100644
--- a/StryVrModule/Services/EmployeeProgressService.swift
+++ b/StryVrModule/Services/EmployeeProgressService.swift
@@ -1,36 +1,38 @@
 //
 //  EmployeeProgressService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 5/6/25
 //
 //  üìà Employee Progress Service ‚Äì Fetches timeline events from Firestore for analytics
 //
 
+#if canImport(FirebaseFirestore)
 import FirebaseFirestore
 import FirebaseFirestoreSwift
+#endif
 import Foundation
 
 final class EmployeeProgressService {
     static let shared = EmployeeProgressService()
     private let db = Firestore.firestore()
 
     private init() {}
 
     func fetchTimeline(for employeeId: String, completion: @escaping (Result<[EmployeeTimelineEvent], Error>) -> Void) {
         db.collection("employeeTimeline")
             .whereField("employeeId", isEqualTo: employeeId)
             .order(by: "timestamp", descending: true)
             .getDocuments { snapshot, error in
                 if let error = error {
                     completion(.failure(error))
                     return
                 }
 
                 let events = snapshot?.documents.compactMap {
                     try? $0.data(as: EmployeeTimelineEvent.self)
                 } ?? []
 
                 completion(.success(events))
             }
     }
diff --git a/StryVrModule/Services/FirestoreService.swift b/StryVrModule/Services/FirestoreService.swift
index 338942275ce1fdad5ff69a0420403376181ae686..c74415e9b19290abd4d33db3ee8d7b82c2d6bb30 100755
--- a/StryVrModule/Services/FirestoreService.swift
+++ b/StryVrModule/Services/FirestoreService.swift
@@ -1,38 +1,44 @@
 //
 //  FirestoreService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 2/24/25
 //
 //  üì° FirestoreService ‚Äì Centralized Firestore access layer for user data, skills, and history
 //
 
+#if canImport(FirebaseAuth)
 import FirebaseAuth
+#endif
+#if canImport(FirebaseFirestore)
 import FirebaseFirestore
+#endif
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 class FirestoreService {
     static let shared = FirestoreService()
     private let db = Firestore.firestore()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "FirestoreService")
     private init() {}
 
     func fetchUserData(userID: String, completion: @escaping (Result<UserData, Error>) -> Void) {
         guard Auth.auth().currentUser != nil else {
             logger.error("‚õî No authenticated user session")
             completion(.failure(FirestoreServiceError.invalidInput))
             return
         }
         guard !userID.isEmpty else {
             completion(.failure(FirestoreServiceError.invalidInput))
             return
         }
         db.collection("users").document(userID).getDocument { document, error in
             if let error = error {
                 self.logger.error("‚ùå Firestore fetch error: \(error.localizedDescription)")
                 completion(.failure(error))
                 return
             }
 
             guard let document = document, document.exists,
diff --git a/StryVrModule/Services/NotificationService.swift b/StryVrModule/Services/NotificationService.swift
index 8819bb8352f38038ba6bfc54df20e657dc2b71c5..ab16b8cf3e580b70f67e56755d46f654ddb9c3d7 100755
--- a/StryVrModule/Services/NotificationService.swift
+++ b/StryVrModule/Services/NotificationService.swift
@@ -1,37 +1,47 @@
 //
 //  NotificationService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //
+#if canImport(FirebaseAuth)
 import FirebaseAuth
+#endif
+#if canImport(FirebaseFirestore)
 import FirebaseFirestore
+#endif
+#if canImport(FirebaseMessaging)
 import FirebaseMessaging
+#endif
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
+#if canImport(UserNotifications)
 import UserNotifications
+#endif
 
 /// Manages push notifications for video engagement, recommendations, and learning reminders
 final class NotificationService: NSObject, ObservableObject, UNUserNotificationCenterDelegate, MessagingDelegate {
     static let shared = NotificationService()
     private let db = Firestore.firestore()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "NotificationService")
 
     override private init() {}
 
     // MARK: - Notification Permissions
 
     /// Requests push notification permissions from the user
     func requestNotificationPermissions() {
         let center = UNUserNotificationCenter.current()
         center.delegate = self
 
         center.requestAuthorization(options: [.alert, .sound, .badge]) { _, error in
             if let error = error {
                 self.logger.error("‚ùå Notification permission error: \(error.localizedDescription)")
             } else {
                 self.logger.info("‚úÖ Notification permissions granted")
                 DispatchQueue.main.async {
                     UIApplication.shared.registerForRemoteNotifications()
                 }
             }
diff --git a/StryVrModule/Services/PaymentService.swift b/StryVrModule/Services/PaymentService.swift
index 8510e3bed2cd2d76aa8c18fbc0d39e908e325a79..644e68ca893f41d4c6bc6b761d009a6173a7a8f2 100755
--- a/StryVrModule/Services/PaymentService.swift
+++ b/StryVrModule/Services/PaymentService.swift
@@ -1,35 +1,41 @@
 //
 //  PaymentService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //
+#if canImport(Combine)
 import Combine
+#endif
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
+#if canImport(StoreKit)
 import StoreKit
+#endif
 
 /// Manages in-app purchases and subscriptions for StryVr
 final class PaymentService: NSObject, ObservableObject, SKPaymentTransactionObserver, SKProductsRequestDelegate {
     static let shared = PaymentService()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "PaymentService")
 
     @Published var availableProducts: [SKProduct] = []
     @Published var purchasedProducts: Set<String> = []
 
     override private init() {
         super.init()
         SKPaymentQueue.default().add(self)
     }
 
     // MARK: - Check Purchase
 
     /// Checks if a product has already been purchased
     func isProductPurchased(_ productID: String) -> Bool {
         guard !productID.isEmpty else {
             logger.error("‚ùå Invalid product ID")
             return false
         }
         return purchasedProducts.contains(productID)
     }
 
diff --git a/StryVrModule/Services/SecureStorageService.swift b/StryVrModule/Services/SecureStorageService.swift
index 54cbc24f6e608737d9881d2a30ae7395f8686712..a9fe7fd3dbb9b8dd979a8f40c79d691bdf814f84 100755
--- a/StryVrModule/Services/SecureStorageService.swift
+++ b/StryVrModule/Services/SecureStorageService.swift
@@ -1,36 +1,42 @@
 //
 //  SecureStorageService.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //  üîê SecureStorageService ‚Äì Keychain-based sensitive data handler with biometric authentication support
 //
 import Foundation
+#if canImport(LocalAuthentication)
 import LocalAuthentication
-import os.log
+#endif
+#if canImport(os)
+import os
+#endif
+#if canImport(Security)
 import Security
+#endif
 
 /// Manages secure storage of sensitive data using Apple's Keychain API
 final class SecureStorageService {
     static let shared = SecureStorageService()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr", category: "SecureStorageService")
 
     private init() {}
 
     // MARK: - Secure Storage Methods
 
     /// Saves a value securely in the Keychain
     func save(key: String, value: String) {
         guard !key.isEmpty, !value.isEmpty else {
             logger.error("üî¥ Invalid key or value provided")
             return
         }
 
         guard let data = value.data(using: .utf8) else {
             logger.error("üî¥ Failed to convert value to data")
             return
         }
 
         let query: [String: Any] = [
             kSecClass as String: kSecClassGenericPassword,
             kSecAttrAccount as String: key,
diff --git a/StryVrModule/Services/SkillService.swift b/StryVrModule/Services/SkillService.swift
new file mode 100644
index 0000000000000000000000000000000000000000..cc56430453c876391cabcc8ae0b3cfa1eb00632e
--- /dev/null
+++ b/StryVrModule/Services/SkillService.swift
@@ -0,0 +1,39 @@
+import Foundation
+
+/// Default implementation of `SkillServiceProtocol` using in-memory storage for previews
+final class SkillService: SkillServiceProtocol {
+    static let shared = SkillService()
+
+    private var skillsStorage: [SkillMatrixEntry] = []
+    private init() {}
+
+    func fetchSkills(for userID: String = "", completion: @escaping (Result<[SkillMatrixEntry], Error>) -> Void) {
+        completion(.success(skillsStorage))
+    }
+
+    func updateSkillRating(userID: String, skillID: String, newRating: Double, completion: @escaping (Result<Void, Error>) -> Void) {
+        if let index = skillsStorage.firstIndex(where: { $0.id == skillID }) {
+            skillsStorage[index] = SkillMatrixEntry(
+                id: skillsStorage[index].id,
+                skillName: skillsStorage[index].skillName,
+                rating: newRating,
+                category: skillsStorage[index].category,
+                reviewerID: skillsStorage[index].reviewerID,
+                lastUpdated: Date()
+            )
+            completion(.success(()))
+        } else {
+            completion(.failure(NSError(domain: "SkillService", code: 1, userInfo: [NSLocalizedDescriptionKey: "Skill not found"])))
+        }
+    }
+
+    func addSkill(userID: String, skill: SkillMatrixEntry, completion: @escaping (Result<Void, Error>) -> Void) {
+        skillsStorage.append(skill)
+        completion(.success(()))
+    }
+
+    func deleteSkill(userID: String, skillID: String, completion: @escaping (Result<Void, Error>) -> Void) {
+        skillsStorage.removeAll { $0.id == skillID }
+        completion(.success(()))
+    }
+}
diff --git a/StryVrModule/Services/VideoContentService.swift b/StryVrModule/Services/VideoContentService.swift
index 7c6b8a1ef5ea5b3d2f1224dc464e57222af38b40..7fb855ec9b70e117469965198460a3bcdce222e7 100755
--- a/StryVrModule/Services/VideoContentService.swift
+++ b/StryVrModule/Services/VideoContentService.swift
@@ -1,37 +1,45 @@
 //
 //  VideoContentService.swift
 //  StryVr
 //
 //  üìπ VideoContentService ‚Äì Manages uploads, metadata, streaming & AI tagging
 //  Created by Joe Dormond on 3/12/25.
 //
+#if canImport(AVFoundation)
 import AVFoundation
+#endif
+#if canImport(FirebaseFirestore)
 import FirebaseFirestore
+#endif
+#if canImport(FirebaseStorage)
 import FirebaseStorage
+#endif
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 /// Manages video uploads, metadata, streaming & AI tagging
 final class VideoContentService {
     static let shared = VideoContentService()
     private let storage = Storage.storage().reference()
     private let db = Firestore.firestore()
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "VideoContentService")
 
     private init() {}
 
     // MARK: - Upload Video
 
     func uploadVideo(
         fileURL: URL,
         uploaderID: String,
         title: String,
         caption: String?,
         thumbnailURL: String? = nil,
         duration: Int,
         category: VideoCategory,
         isFeatured: Bool = false,
         completion: @escaping (String?) -> Void
     ) {
         let videoID = UUID().uuidString
         let videoRef = storage.child("videos/\(uploaderID)/\(videoID).mp4")
diff --git a/StryVrModule/Tests/APIIntegrationTest.swift b/StryVrModule/Tests/APIIntegrationTest.swift
index fa6a89624f5b842486944f6c135fd8377fdae4b2..2de133f07b9f25acc2773592b9736ac7e2969fdd 100644
--- a/StryVrModule/Tests/APIIntegrationTest.swift
+++ b/StryVrModule/Tests/APIIntegrationTest.swift
@@ -1,31 +1,27 @@
-//
-//  APIIntegrationTest.swift
-//  StryVrTests
-//
-//  ‚úÖ Live Endpoint Test ‚Äì Validates /api/recommendations endpoint
-//
-
-@testable import StryVr
+#if canImport(SwiftUI)
 import XCTest
+@testable import StryVr
 
 final class APIIntegrationTest: XCTestCase {
     func testFetchRecommendationsEndpoint() {
         let expectation = self.expectation(description: "API responds with valid data")
         let url = AppConfig.fullAPIURL(for: AppConfig.Endpoints.recommendations)
 
         APIService.shared.fetchData(from: url) { result in
             switch result {
             case let .success(data):
                 XCTAssertFalse(data.isEmpty, "API returned empty data")
-                print("‚úÖ API Response: \(String(data: data, encoding: .utf8) ?? "[non-text]")")
+                let text = String(data: data, encoding: .utf8) ?? "[non-text]"
+                print("‚úÖ API Response: \(text)")
 
             case let .failure(error):
                 XCTFail("‚ùå API call failed: \(error.localizedDescription)")
             }
 
             expectation.fulfill()
         }
 
         waitForExpectations(timeout: 10)
     }
 }
+#endif
diff --git a/StryVrModule/Utils/ConfettiManager.swift b/StryVrModule/Utils/ConfettiManager.swift
index f0b0c386d2f0ab2b62fa5b7a4b7c9ceae9cc6278..984c18bb925fdad39cfa0dda44955e636acdbcdc 100644
--- a/StryVrModule/Utils/ConfettiManager.swift
+++ b/StryVrModule/Utils/ConfettiManager.swift
@@ -1,40 +1,49 @@
 //
 //  ConfettiManager.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 5/5/25.
 //  üéâ Central Confetti Manager for Achievements, Streaks & Challenges
 //
 
+#if canImport(ConfettiSwiftUI)
 import ConfettiSwiftUI
+#endif
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 /// Usage:
 /// Bind `.confettiCannon(counter: ConfettiManager.shared.counter, num: 20)` to a view.
 /// Call `ConfettiManager.shared.triggerConfetti()` to trigger the animation.
 
 /// Singleton manager to trigger confetti from anywhere in the app
 final class ConfettiManager: ObservableObject {
     static let shared = ConfettiManager()
 
     /// Counter that drives the confetti animation
     @Published var counter: Int = 0
 
     /// Number of confetti particles to emit (used by views that observe this)
     @Published var numberOfParticles: Int = 20
 
     /// Placeholder for future customization (e.g., colors or shapes)
     var styleOptions: [String: Any] = [:]
 
     private init() {}
 
     /// Call this to launch a confetti burst
     func triggerConfetti(particles: Int? = nil) {
         DispatchQueue.main.async {
             if let particles = particles {
                 self.numberOfParticles = particles
             }
             self.counter += 1
         }
     }
+
+    /// Alias for `triggerConfetti` used by legacy code
+    func startConfetti(particles: Int? = nil) {
+        triggerConfetti(particles: particles)
+    }
 }
diff --git a/StryVrModule/Utils/CryptoHelper.swift b/StryVrModule/Utils/CryptoHelper.swift
index 02fe3148a5e1f72348050248dc9aba92d1d62853..75bf80810527aa1a1c976e39b64967d84ea07fa9 100644
--- a/StryVrModule/Utils/CryptoHelper.swift
+++ b/StryVrModule/Utils/CryptoHelper.swift
@@ -1,26 +1,28 @@
 //
 //  CryptoHelper.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 5/15/25.
 //  üîê Utility ‚Äì Secure Hashing with SHA256 (CryptoKit)
 //
 
+#if canImport(CryptoKit)
 import CryptoKit
+#endif
 import Foundation
 
 enum CryptoHelper {
     /// Generates a SHA256 hash from a string
     static func hash(_ input: String) -> String {
         let inputData = Data(input.utf8)
         let hashed = SHA256.hash(data: inputData)
         return hashed.map { String(format: "%02x", $0) }.joined()
     }
 
     /// Compares input string to a hashed string
     static func verify(_ input: String, against hashed: String) -> Bool {
         return hash(input) == hashed
     }
 }
 
 //     /// Generates a random UUID string
diff --git a/StryVrModule/Utils/Logger.swift b/StryVrModule/Utils/Logger.swift
new file mode 100644
index 0000000000000000000000000000000000000000..e31e1f4ab432b644e477455cd1af6bd0971ca6a8
--- /dev/null
+++ b/StryVrModule/Utils/Logger.swift
@@ -0,0 +1,22 @@
+#if canImport(os)
+import os
+#endif
+
+/// Provides shared logging instances across the StryVr app
+enum AppLogger {
+    static let shared = AppLogger()
+
+    #if canImport(os)
+    let general = AppLogger.create(subsystem: "com.stryvr.app", category: "general")
+    
+    private static func create(subsystem: String, category: String) -> os.Logger {
+        os.Logger(subsystem: subsystem, category: category)
+    }
+    #else
+    // Fallback simple logger for platforms without os.Logger
+    struct SimpleLogger {
+        func log(_ message: String) { print(message) }
+    }
+    let general = SimpleLogger()
+    #endif
+}
diff --git a/StryVrModule/Utils/LottieAnimationManager.swift b/StryVrModule/Utils/LottieAnimationManager.swift
index 0305d553da8c052e1c007f5ca1643844a20be442..6063ea96a04a98f412b4dc07435b8f5cf9fbea01 100755
--- a/StryVrModule/Utils/LottieAnimationManager.swift
+++ b/StryVrModule/Utils/LottieAnimationManager.swift
@@ -1,32 +1,33 @@
 //
 //  LottieAnimationManager.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 5/14/25.
 //  üéûÔ∏è Lottie Wrapper ‚Äì SwiftUI-Compatible View for Confetti & Animations
 //
+#if canImport(Lottie) && canImport(SwiftUI)
 import Lottie
 import SwiftUI
 
 /// SwiftUI-compatible wrapper for displaying Lottie animations
 struct LottieAnimationView: UIViewRepresentable {
     let animationName: String
     let loopMode: LottieLoopMode
     var onComplete: (() -> Void)? = nil
 
     func makeUIView(context: Context) -> UIView {
         let containerView = UIView(frame: .zero)
 
         guard let animation = Animation.named(animationName) else {
             assertionFailure("‚ö†Ô∏è Lottie animation not found: \(animationName)")
             return containerView
         }
 
         let animationView = AnimationView(animation: animation)
         animationView.contentMode = .scaleAspectFit
         animationView.loopMode = loopMode
         animationView.translatesAutoresizingMaskIntoConstraints = false
         animationView.isAccessibilityElement = true
         animationView.accessibilityLabel = "Lottie animation: \(animationName)"
 
         containerView.addSubview(animationView)
@@ -44,25 +45,26 @@ struct LottieAnimationView: UIViewRepresentable {
                 onComplete?()
             }
         }
 
         context.coordinator.animationView = animationView
         return containerView
     }
 
     func updateUIView(_: UIView, context: Context) {
         guard let animationView = context.coordinator.animationView else { return }
         animationView.play { finished in
             if finished {
                 onComplete?()
             }
         }
     }
 
     func makeCoordinator() -> Coordinator {
         Coordinator()
     }
 
     final class Coordinator {
         var animationView: AnimationView?
     }
 }
+#endif
diff --git a/StryVrModule/Utils/NetworkManager.swift b/StryVrModule/Utils/NetworkManager.swift
index 16c520f672613db9631a1f73970fa29fcdd2e998..11200ad3acb87c367f48d5d5ea099280b40676f9 100755
--- a/StryVrModule/Utils/NetworkManager.swift
+++ b/StryVrModule/Utils/NetworkManager.swift
@@ -1,35 +1,37 @@
 //
 //  NetworkManager.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/26/25.
 //  üåê Centralized HTTP client for consistent and logged API requests
 //
 
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 final class NetworkManager {
     // MARK: - Singleton
 
     static let shared = NetworkManager()
 
     // MARK: - Logger
 
     private let logger = Logger(subsystem: "com.stryvr.networking", category: "NetworkManager")
 
     // MARK: - Init
 
     private init() {}
 
     // MARK: - Generic Request Method
 
     /// Sends a generic HTTP request and decodes the result into a Codable type
     func request<T: Codable>(
         urlString: String,
         method: HTTPMethod = .get,
         headers: [String: String]? = nil,
         timeout: TimeInterval = 30.0,
         decoder: JSONDecoder = JSONDecoder(),
         completion: @escaping (Result<T, NetworkError>) -> Void
     ) {
diff --git a/StryVrModule/Utils/ReportAnalysisHelper.swift b/StryVrModule/Utils/ReportAnalysisHelper.swift
index d5c42426bf858a7acc195901bd459719ae2355dd..71f6dedd5e1f2cd519d2a3a89e154c9ccb762f40 100644
--- a/StryVrModule/Utils/ReportAnalysisHelper.swift
+++ b/StryVrModule/Utils/ReportAnalysisHelper.swift
@@ -1,35 +1,37 @@
 //
 //  ReportAnalysisHelper.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/1/25.
 //  üìä Optimized for Performance, Scalability, and Clarity
 //
 
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 // MARK: - ReportAnalysisHelper
 
 enum ReportAnalysisHelper {
     /// Calculates average progress for each skill across reports.
     /// - Parameter reports: `[LearningReport]` array.
     /// - Returns: `[String: Double]` skills dictionary with average progress.
     static func calculateAverageSkillProgress(from reports: [LearningReport]) -> [String: Double] {
         var skillTotals = [String: (total: Double, count: Int)]()
 
         for report in reports {
             for (skill, progress) in report.skillsProgress {
                 skillTotals[skill, default: (0, 0)].total += progress
                 skillTotals[skill, default: (0, 0)].count += 1
             }
         }
 
         let averages = skillTotals.compactMapValues { total, count -> Double? in
             guard count > 0 else { return nil }
             let average = total / Double(count)
             os_log("üìä Skill %{public}@ average: %{public}.2f", skill, average)
             return average
         }
 
         return averages
diff --git a/StryVrModule/Utils/ResumePDFGenerator.swift b/StryVrModule/Utils/ResumePDFGenerator.swift
index 36cfc7dfa556ec0067245990085ec52ae134b076..b593102faa096ae02b0b803729910bd97b7c8877 100644
--- a/StryVrModule/Utils/ResumePDFGenerator.swift
+++ b/StryVrModule/Utils/ResumePDFGenerator.swift
@@ -1,35 +1,37 @@
 //
 //  ResumePDFGenerator.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/30/25.
 //
 
-import Foundation
-import PDFKit
+#if canImport(UIKit)
 import UIKit
+import PDFKit
+#endif
+import Foundation
 
 class ResumePDFGenerator {
     static let shared = ResumePDFGenerator()
 
     /// Generates a PDF resume with the given details.
     /// - Parameters:
     ///   - name: The name of the individual.
     ///   - location: The location/address of the individual.
     ///   - companies: An array of verified companies with role and dates.
     ///   - skills: An array of tuples containing skill name and proficiency percentage.
     ///   - workImpact: A description of the work impact.
     ///   - teamFeedback: Feedback from the team.
     /// - Returns: A URL pointing to the generated PDF file.
     func createPDF(
         name: String,
         location: String,
         companies: [String],
         skills: [(name: String, percentage: Int)],
         workImpact: String,
         teamFeedback: String
     ) -> URL {
         let pdfMetaData = [
             kCGPDFContextCreator: "Stryvr",
             kCGPDFContextAuthor: "Stryvr AI Engine",
             kCGPDFContextTitle: "Verified R√©sum√©",
diff --git a/StryVrModule/ViewModels/AuthViewModel.swift b/StryVrModule/ViewModels/AuthViewModel.swift
index dde5c0fab552a2341381590786be1ea5c9b7fb25..42adde03c56912470a1c3c7a674820dbb5052280 100644
--- a/StryVrModule/ViewModels/AuthViewModel.swift
+++ b/StryVrModule/ViewModels/AuthViewModel.swift
@@ -1,35 +1,39 @@
 //
 //  AuthViewModel.swift
 //  StryVr
 //
 //  üîí Fully Optimized Auth ViewModel with Enhanced Error Handling, Firebase Auth Integration, Real-Time Updates
 //
 
+#if canImport(FirebaseAuth)
 import FirebaseAuth
+#endif
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 final class AuthViewModel: ObservableObject {
     static let shared = AuthViewModel()
 
     @Published private(set) var userSession: FirebaseAuth.User?
     @Published private(set) var errorMessage: String?
     @Published private(set) var isAuthenticated: Bool = false
 
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr.app", category: "AuthViewModel")
     private var authListenerHandle: AuthStateDidChangeListenerHandle?
 
     private init() {
         configureAuthListener()
     }
 
     deinit {
         removeAuthListener()
     }
 
     // MARK: - Auth State Listener
 
     private func configureAuthListener() {
         authListenerHandle = Auth.auth().addStateDidChangeListener { [weak self] _, user in
             DispatchQueue.main.async {
                 self?.userSession = user
diff --git a/StryVrModule/ViewModels/HomeViewModel.swift b/StryVrModule/ViewModels/HomeViewModel.swift
index fc921456245e09a7e514ad0b883108108f402ef0..dac4f7bcc134b88f827d2530bc499bb6fd2d19d9 100755
--- a/StryVrModule/ViewModels/HomeViewModel.swift
+++ b/StryVrModule/ViewModels/HomeViewModel.swift
@@ -1,36 +1,40 @@
 //
 //  HomeViewModel.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/15/25.
 //  üìà Fully Optimized for Performance, Scalability, Robust Error Handling, and Maintainability
 //
 
+#if canImport(Combine)
 import Combine
+#endif
 import Foundation
-import os.log
+#if canImport(os)
+import os
+#endif
 
 final class HomeViewModel: ObservableObject {
     // MARK: - Published Properties
 
     @Published private(set) var skills: [Skill] = []
     @Published var errorMessage: String?
     @Published private(set) var isLoading: Bool = false
 
     // MARK: - Private Properties
 
     private var cancellables = Set<AnyCancellable>()
     private let skillService: SkillServiceProtocol
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "com.stryvr.app", category: "HomeViewModel")
 
     // MARK: - Initialization
 
     init(skillService: SkillServiceProtocol = SkillService.shared) {
         self.skillService = skillService
         fetchSkills()
     }
 
     // MARK: - Fetch Skills from SkillService
 
     /// Fetches skills using `SkillService` with structured logging and error handling.
     func fetchSkills() {
@@ -46,28 +50,28 @@ final class HomeViewModel: ObservableObject {
                     self.logger.info("‚úÖ Skills successfully fetched and loaded.")
                 case let .failure(error):
                     self.handleFetchError(error)
                 }
             }, receiveValue: { [weak self] skills in
                 guard let self = self else { return }
                 self.skills = skills
                 self.logger.info("üì¶ Skills received: \(skills.count)")
             })
             .store(in: &cancellables)
     }
 
     // MARK: - Retry Fetch
 
     /// Retries fetching skills, useful for refresh actions.
     func retryFetchSkills() {
         fetchSkills()
         logger.info("‚ôªÔ∏è Retry fetching skills triggered.")
     }
 
     // MARK: - Private Helper for Error Handling
 
     /// Handles fetch errors with detailed logging and user-facing messages.
     private func handleFetchError(_ error: Error) {
         errorMessage = "Unable to load skills. Please try again."
-        logger.error("‚ùå Error fetching skills: \(error.localizedDescription, privacy: .public)")
+        logger.error("‚ùå Error fetching skills: \(error.localizedDescription)")
     }
 }
diff --git a/StryVrModule/Views/AI/CareerCard.swift b/StryVrModule/Views/AI/CareerCard.swift
index a2d134d65313ac6bc37ae094b4b9dafb85c20c22..b23a326246bfc2176c00319ae68875a1ceff9f72 100644
--- a/StryVrModule/Views/AI/CareerCard.swift
+++ b/StryVrModule/Views/AI/CareerCard.swift
@@ -1,43 +1,45 @@
 //
 //  CareerCard.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/1/25.
 //  üß† Reusable AI Career Suggestion Card | HIG-Compliant & Accessible
 //
 
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 /// A reusable, visually polished career suggestion card powered by AI insights.
 struct CareerCard: View {
     let title: String
 
     var body: some View {
         VStack(alignment: .leading, spacing: 8) {
             // Main Career Title
             Text(title)
                 .font(Theme.Typography.subheadline)
                 .foregroundColor(Theme.Colors.textPrimary)
                 .accessibilityLabel("Career title: \(title)")
 
             // AI-driven suggestion info
             Text("AI suggested this role based on your skill growth.")
                 .font(Theme.Typography.caption)
                 .foregroundColor(Theme.Colors.textSecondary)
                 .accessibilityHint("AI-based recommendation.")
         }
         .padding(Theme.Spacing.medium)
         .frame(maxWidth: .infinity, alignment: .leading)
-        .background(Theme.Colors.card ?? Color.gray) // Fallback color
+        .background(Theme.Colors.card)
         .cornerRadius(Theme.CornerRadius.large)
         .shadow(color: Theme.Colors.textSecondary.opacity(0.1), radius: 4, x: 0, y: 2)
         .accessibilityElement(children: .combine)
         .accessibilityAddTraits(.isButton) // Optional: if the card is interactive
     }
 }
 
 #Preview {
     CareerCard(title: "iOS Developer")
         .padding()
         .preferredColorScheme(.dark)
 }
diff --git a/StryVrModule/Views/AI/CareerPathInsightsView.swift b/StryVrModule/Views/AI/CareerPathInsightsView.swift
index e453c5cfa4fd9af1774ebe9843d9847f685b673a..93b22df6cd555286e4570f6109ddf061812aa07e 100644
--- a/StryVrModule/Views/AI/CareerPathInsightsView.swift
+++ b/StryVrModule/Views/AI/CareerPathInsightsView.swift
@@ -1,34 +1,36 @@
 //
 //  CareerPathInsightsView.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/1/25.
 //  üß† AI Career Insights View ‚Äì Personalized Pathway Suggestions
 //
 
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 struct CareerPathInsightsView: View {
     @State private var skillData: [SkillProgress] = []
     @State private var suggestedCareers: [String] = []
     @State private var isLoading: Bool = false
     @State private var errorMessage: String?
 
     var body: some View {
         NavigationStack {
             VStack(spacing: Theme.Spacing.large) {
                 Text("AI Career Insights")
                     .font(Theme.Typography.headline)
                     .padding(.top, Theme.Spacing.medium)
 
                 // Loading Indicator
                 if isLoading {
                     ProgressView("Analyzing your skills...")
                         .progressViewStyle(CircularProgressViewStyle(tint: Theme.Colors.accent))
                         .padding()
                 }
 
                 // Error Message
                 if let error = errorMessage {
                     Text(error)
                         .foregroundColor(.red)
diff --git a/StryVrModule/Views/AISkillCoachView.swift b/StryVrModule/Views/AISkillCoachView.swift
index a833801a2bb7a9c5d7aba6ee5d3df0ece8fbf06f..b7b9e1a88b337b4f0ebd9099981ef2a9dd2be13d 100755
--- a/StryVrModule/Views/AISkillCoachView.swift
+++ b/StryVrModule/Views/AISkillCoachView.swift
@@ -1,34 +1,36 @@
 //
 //  AISkillCoachView.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //  ü§ñ AI-Powered Skill Coach ‚Äì Learning Insights + Personalized Suggestions
 //
 
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 struct AISkillCoachView: View {
     @State private var recommendedSkills: [String] = []
     @State private var progressInsights: String = "Loading insights..."
     @State private var hasError: Bool = false
 
     @State private var isLoading: Bool = true
     var body: some View {
         ZStack {
             Theme.Colors.background.ignoresSafeArea()
 
             ScrollView {
                 VStack(alignment: .leading, spacing: Theme.Spacing.large) {
                     // MARK: - Header
 
                     Text("AI Skill Coach")
                         .font(Theme.Typography.headline)
                         .foregroundColor(Theme.Colors.textPrimary)
                         .padding(.top, Theme.Spacing.large)
                         .accessibilityLabel("AI Skill Coach")
                         .accessibilityHint("Provides personalized skill recommendations and growth insights")
 
                     // MARK: - Recommendations
 
                     StryVrCardView(title: "üîç Personalized Skill Recommendations") {
diff --git a/StryVrModule/Views/Auth/RegisterView.swift b/StryVrModule/Views/Auth/RegisterView.swift
index 08276b58a1f06805584730bef89186d81c8f1ade..e1d6bda9bd0fe04f32fff1b1f3bd351e82e6f8a6 100644
--- a/StryVrModule/Views/Auth/RegisterView.swift
+++ b/StryVrModule/Views/Auth/RegisterView.swift
@@ -1,34 +1,38 @@
 //
 //  RegisterView.swift
 //  StryVr
 //
 //  üîê Secure, Firebase-integrated Account Creation with Optional Confetti Celebration
 //
 
+#if canImport(ConfettiSwiftUI)
 import ConfettiSwiftUI
+#endif
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 struct RegisterView: View {
     @Environment(\.presentationMode) var presentationMode
 
     @State private var email: String = ""
     @State private var password: String = ""
     @State private var confirmPassword: String = ""
     @State private var errorMessage: String?
     @State private var isLoading: Bool = false
     @State private var showConfetti: Int = 0
 
     private let authViewModel = AuthViewModel.shared
 
     var body: some View {
         ZStack {
             Theme.Colors.background.ignoresSafeArea()
 
             VStack(spacing: Theme.Spacing.large) {
                 Text("Create Account")
                     .font(Theme.Typography.headline)
                     .foregroundColor(Theme.Colors.textPrimary)
                     .padding(.top, Theme.Spacing.xLarge)
 
                 // MARK: - Input Fields
 
diff --git a/StryVrModule/Views/Debug/DevDebugView.swift b/StryVrModule/Views/Debug/DevDebugView.swift
index f92bab1ba8ee14f2048edddac091b1d65fe3b623..2c05274133f390727be11ae58e0572cf59fb7edf 100644
--- a/StryVrModule/Views/Debug/DevDebugView.swift
+++ b/StryVrModule/Views/Debug/DevDebugView.swift
@@ -1,33 +1,35 @@
 //
 //  DevDebugView.swift
 //  StryVr
 //
 //  üß™ Developer Debug Panel ‚Äì Logs, Feature Flags, Crash Sim, Deep Links, API Tests
 //
 
+#if canImport(FirebaseAuth)
 import FirebaseAuth
+#endif
 import Pulse
 import PulseUI
 import SwiftUI
 import XCGLogger
 
 struct DevDebugView: View {
     @State private var showLogs = false
     @State private var logMessage = ""
     @State private var testDeepLink = ""
     @State private var showAuthStatus = false
     @State private var aiSuggestions: [String] = []
     @State private var apiTestResult: String = ""
 
     @Environment(\.isDebug) var isDebug
     private let logger = XCGLogger.default
 
     var body: some View {
         NavigationStack {
             Form {
                 // MARK: - Logs
 
                 if isDebug {
                     Section(header: Text("ü™µ Logs & Console")) {
                         Toggle("Show Pulse Logs", isOn: $showLogs)
 
diff --git a/StryVrModule/Views/Home/FriendLearningFeed.swift b/StryVrModule/Views/Home/FriendLearningFeed.swift
index 3412e275fc9510c1f39b808e75e1fe7a7c91d855..63a32b711aaee57f70f8441d7296239d14065310 100755
--- a/StryVrModule/Views/Home/FriendLearningFeed.swift
+++ b/StryVrModule/Views/Home/FriendLearningFeed.swift
@@ -1,35 +1,39 @@
 //
 //  FriendLearningFeed.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //  üß† Real-Time Friend Skill Feed ‚Äì Firebase-Powered Social Learning UI
 //
 
+#if canImport(FirebaseFirestore)
 import FirebaseFirestore
-import os.log
+#endif
+#if canImport(os)
+import os
+#endif
 import SwiftUI
 
 /// Displays a real-time social feed showing what friends are learning
 struct FriendLearningFeed: View {
     @State private var feedItems: [LearningFeedItem] = []
     @State private var isError: Bool = false
     @State private var isLoading: Bool = true
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "FriendLearningFeed")
 
     var body: some View {
         NavigationStack {
             ZStack {
                 Theme.Colors.background.ignoresSafeArea()
 
                 if isLoading {
                     ProgressView("Loading feed...")
                         .progressViewStyle(CircularProgressViewStyle(tint: Theme.Colors.accent))
                         .accessibilityLabel("Loading friend learning feed")
                 } else if isError {
                     VStack {
                         Text("‚ö†Ô∏è Failed to load feed. Please try again later.")
                             .font(Theme.Typography.body)
                             .foregroundColor(.red)
                             .padding()
                             .accessibilityLabel("Error loading learning feed")
diff --git a/StryVrModule/Views/Home/HomeView.swift b/StryVrModule/Views/Home/HomeView.swift
index 40df7de1cd401f2f45157899255bd3bd98799bda..d2e834d3862964265acfb2cae21c84cc91203c29 100755
--- a/StryVrModule/Views/Home/HomeView.swift
+++ b/StryVrModule/Views/Home/HomeView.swift
@@ -1,35 +1,41 @@
 //
 //  HomeView.swift
 //  StryVr
 //
 //  üè° Clean Home Dashboard ‚Äì Daily Goals, Streaks, Challenges, Achievements with Confetti Celebrations
 //
 
+#if canImport(ConfettiSwiftUI)
 import ConfettiSwiftUI
-import os.log
+#endif
+#if canImport(os)
+import os
+#endif
+#if canImport(SwiftUI)
 import SwiftUI
+#endif
 
 struct HomeView: View {
     @State private var dailyGoalCompleted = false
     @State private var currentStreak = 5
     @State private var bestStreak = 12
     @State private var activeChallengesCount = 3
     @State private var recentAchievementsCount = 2
 
     @StateObject private var confettiManager = ConfettiManager.shared
     @EnvironmentObject var authViewModel: AuthViewModel
 
     @Environment(\.isDebug) var isDebug
     @State private var showDevPanel = false
 
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "HomeView")
 
     var body: some View {
         NavigationStack {
             ZStack(alignment: .topLeading) {
                 ScrollView {
                     VStack(alignment: .leading, spacing: Theme.Spacing.large) {
                         // MARK: - Greeting
 
                         Text("Welcome back to StryVr! üëã")
                             .font(Theme.Typography.headline)
diff --git a/StryVrModule/Views/Navigation/TabItem.swift b/StryVrModule/Views/Navigation/TabItem.swift
deleted file mode 100644
index bd59c4feef304c08d61db7b619e220bfc202300b..0000000000000000000000000000000000000000
--- a/StryVrModule/Views/Navigation/TabItem.swift
+++ /dev/null
@@ -1,32 +0,0 @@
-//
-//  TabItem.swift
-//  StryVr
-//
-//  Created by Joe Dormond on 4/28/25.
-//
-//  üìÇ Enum - Defines available tabs for the CustomTabBar.
-//
-
-import SwiftUI
-
-enum TabItem: Int, CaseIterable {
-    case home, learning, community, profile
-
-    var title: String {
-        switch self {
-        case .home: return "Home"
-        case .learning: return "Learn"
-        case .community: return "Community"
-        case .profile: return "Profile"
-        }
-    }
-
-    var icon: String {
-        switch self {
-        case .home: return "icon_home"
-        case .learning: return "icon_learning"
-        case .community: return "icon_community"
-        case .profile: return "icon_profile"
-        }
-    }
-}
diff --git a/StryVrModule/Views/PaywallView.swift b/StryVrModule/Views/PaywallView.swift
index 7667e1e65badfb57c394d881c29d54845a42d41b..d4c2b4669e4fbf0d69f950519f0d83d8af1cdff6 100755
--- a/StryVrModule/Views/PaywallView.swift
+++ b/StryVrModule/Views/PaywallView.swift
@@ -1,33 +1,35 @@
 //
 //  PaywallView.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/12/25.
 //
 
-import os.log
+#if canImport(os)
+import os
+#endif
 import StoreKit
 import SwiftUI
 
 /// Displays the paywall with AI-based trial recommendations and premium offers
 struct PaywallView: View {
     @State private var selectedPlan: SubscriptionPlan = .premium
     @State private var isProcessingPayment = false
     @State private var limitedTimeOffer: String?
     @State private var showAlert = false
     @State private var alertMessage = ""
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier!, category: "PaywallView")
 
     var body: some View {
         ZStack {
             Color.background.ignoresSafeArea()
 
             ScrollView {
                 VStack(spacing: Spacing.large) {
                     // MARK: - Header
 
                     VStack(spacing: Spacing.small) {
                         Text("üîì Unlock Your Full Potential!")
                             .font(FontStyle.title)
                             .foregroundColor(.whiteText)
                             .multilineTextAlignment(.center)
diff --git a/StryVrModule/Views/Security/SecureStorageManager.swift b/StryVrModule/Views/Security/SecureStorageManager.swift
index ad137562ad98f482f6922674a0c44f331f284758..a1c66927afbffe49e07168d683686db451292c99 100755
--- a/StryVrModule/Views/Security/SecureStorageManager.swift
+++ b/StryVrModule/Views/Security/SecureStorageManager.swift
@@ -1,34 +1,36 @@
 //
 //  SecureStorageManager.swift
 //  StryVr
 //
 //  Created by Joseph Dormond on 4/15/25.
 //  üîê SecureStorageManager & View ‚Äì Keychain-backed persistence with MVVM architecture
 //
 
-import os.log
+#if canImport(os)
+import os
+#endif
 import Security
 import SwiftUI
 
 // MARK: - SecureStorageError
 
 enum SecureStorageError: Error, LocalizedError {
     case dataConversionFailed
     case saveFailed(OSStatus)
     case loadFailed(OSStatus)
 
     var errorDescription: String? {
         switch self {
         case .dataConversionFailed:
             return "Data conversion failed."
         case let .saveFailed(status):
             return "Save failed with status: \(status)."
         case let .loadFailed(status):
             return "Load failed with status: \(status)."
         }
     }
 }
 
 // MARK: - SecureStorageManager
 
 final class SecureStorageManager {
diff --git a/StryVrModule/Views/SplashScreen/SplashScreenView.swift b/StryVrModule/Views/SplashScreen/SplashScreenView.swift
index bae36dbe27c004b18310c4204875af2e9f4b11a3..91a5ad424547a834f4b883b49d90b041de967cbc 100755
--- a/StryVrModule/Views/SplashScreen/SplashScreenView.swift
+++ b/StryVrModule/Views/SplashScreen/SplashScreenView.swift
@@ -1,33 +1,35 @@
 //
 //  SplashScreenView.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/17/25.
 //
 
-import os.log
+#if canImport(os)
+import os
+#endif
 import SwiftUI
 
 /// Animated splash screen that adapts to Light & Dark Mode with StryVr branding
 struct SplashScreenView: View {
     @State private var isActive = false
     @Environment(\.colorScheme) var colorScheme
 
     private let splashDuration: TimeInterval = 2.0
     private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "StryVr", category: "SplashScreenView")
 
     var body: some View {
         ZStack {
             // Background adapts to light or dark mode
             backgroundColor
                 .ignoresSafeArea()
 
             VStack(spacing: 20) {
                 // MARK: - Logo
 
                 Image(logoName)
                     .resizable()
                     .scaledToFit()
                     .frame(width: 120, height: 120)
                     .transition(.opacity)
                     .accessibilityLabel("StryVr App Logo")
diff --git a/StryVrModule/Views/UITheme/Colors.swift b/StryVrModule/Views/UITheme/Colors.swift
index aed86bdb71d56c3a20d255ff1b6396611d541045..b7e344f4d0e7c39e711341b91031ac44f6b4bfa7 100644
--- a/StryVrModule/Views/UITheme/Colors.swift
+++ b/StryVrModule/Views/UITheme/Colors.swift
@@ -1,58 +1,63 @@
 //
 //  Colors.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 4/15/25.
 //  üé® Optimized Color System for Performance & HIG Compliance
 //
 
 import SwiftUI
+#if canImport(os)
+import os
+#endif
 
 extension Color {
     // MARK: - Hex initializer with optional opacity
 
     /// Initializes a `Color` from a hex string with optional opacity.
     /// - Parameters:
     ///   - hex: The hex string representing the color (e.g., "#FFFFFF").
     ///   - opacity: The opacity of the color (default is 1.0).
     init(hex: String, opacity: Double = 1.0) {
         let cleanedHex = hex.trimmingCharacters(in: .alphanumerics.inverted)
         var int: UInt64 = 0
         Scanner(string: cleanedHex).scanHexInt64(&int)
 
         let r, g, b: Double
         switch cleanedHex.count {
         case 6:
             r = Double((int >> 16) & 0xFF) / 255.0
             g = Double((int >> 8) & 0xFF) / 255.0
             b = Double(int & 0xFF) / 255.0
         default:
             r = 0.0
             g = 0.0
             b = 0.0
+#if canImport(os)
             os_log("‚ö†Ô∏è Invalid hex string: %{public}@", log: .default, type: .error, hex)
+#endif
         }
 
         self.init(.sRGB, red: r, green: g, blue: b, opacity: opacity)
     }
 
     // MARK: - App Color Palette (HIG & Accessibility Compliant)
 
     /// App-wide color palette using asset catalog colors.
     static let background = Color("Background") // Use asset catalog colors
     static let card = Color("Card")
     static let neonBlue = Color("NeonBlue")
     static let lightGray = Color("LightGray")
     static let whiteText = Color("WhiteText")
 }
 
 // MARK: - Preview colors (Fallback defaults if assets fail)
 
 extension Color {
     enum Fallback {
         /// Fallback colors for previews or when asset catalog colors are unavailable.
         static let background = Color(hex: "#0D0D0D")
         static let card = Color(hex: "#1A1A1A")
         static let neonBlue = Color(hex: "#4FC3F7")
         static let lightGray = Color(hex: "#AAAAAA")
         static let whiteText = Color.white
diff --git a/StryVrModule/Views/UITheme/ThemeManager.swift b/StryVrModule/Views/UITheme/ThemeManager.swift
index ac311a030fe6fff354b2e1c0b30caffe1343e8d6..73c8e787fb4c160c824dcc7810a3436addc7c7aa 100755
--- a/StryVrModule/Views/UITheme/ThemeManager.swift
+++ b/StryVrModule/Views/UITheme/ThemeManager.swift
@@ -1,53 +1,55 @@
 //
 //  ThemeManager.swift
 //  StryVr
 //
 //  Created by Joe Dormond on 3/7/25.
 //  üé® Centralized Theme Config for Layout, Fonts, Colors & Shadows
 //
 
 import SwiftUI
 
 /// Global Theme Configuration used throughout StryVr
 enum Theme {
     // MARK: - Color Palette (Asset-based)
 
     /// Defines the app's primary color palette, with optional fallbacks.
     enum Colors {
         static let safeTextPrimary = Color("TextPrimaryColor") ?? Fallback.textPrimary
         static let safeTextSecondary = Color("TextSecondaryColor") ?? Fallback.textSecondary
         static let background = Color("BackgroundColor")
+        static let card = Color("CardColor")
         static let textPrimary = Color("TextPrimaryColor")
         static let textSecondary = Color("TextSecondaryColor")
         static let accent = Color("AccentColor")
         static let whiteText = Color.white // ‚úÖ Add this to fix missing 'whiteText'
 
         /// Fallbacks (optional)
         enum Fallback {
             static let primary = Color(hex: "#4FC3F7")
             static let background = Color(hex: "#0D0D0D")
+            static let card = Color(hex: "#1A1A1A")
             static let textPrimary = Color.white
             static let textSecondary = Color(hex: "#AAAAAA")
             static let accent = Color(hex: "#FF4081")
         }
     }
 
     // MARK: - Typography (Apple HIG + Rounded)
 
     /// Defines the app's typography styles for consistent text appearance.
     enum Typography {
         static let headline = Font.system(size: 24, weight: .bold, design: .rounded)
         static let subheadline = Font.system(size: 20, weight: .medium, design: .rounded)
         static let body = Font.system(size: 16, weight: .regular, design: .default)
         static let caption = Font.system(size: 14, weight: .light, design: .default)
         static let buttonText = Font.system(size: 18, weight: .semibold, design: .rounded)
     }
 
     // MARK: - Corner Radius (UI Layout Tokens)
 
     /// Defines corner radius values for consistent UI layout.
     enum CornerRadius {
         static let small: CGFloat = 8
         static let medium: CGFloat = 12
         static let large: CGFloat = 16
         static let extraLarge: CGFloat = 24
 
EOF
)